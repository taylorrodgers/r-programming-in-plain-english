[{"path":"index.html","id":"about-this-book","chapter":"1 About This Book","heading":"1 About This Book","text":"never liked programming books. programming courses. reason many assume already programming background.assumption doesn’t work well R programming language. ’s unique ’s statistical programming language. means people often needing learn researchers, statisticians, data analysts – computer engineers.’s wrote book. wanted explain R programming people don’t know program. want strip away bloated, technical jargon used texts explain R programming “plain English.”’s hard enough learn statistics. psychology, business, sociology, medicine, economics, marketing, whatever crazy enough devote best years life learning. don’t need programming language use analyze data hard learn subject .","code":""},{"path":"index.html","id":"things-you-should-know-before-reading","chapter":"1 About This Book","heading":"1.1 Things You Should Know Before Reading","text":"Since R used mostly statistics, know statistics reading book. example, assume know p-value . confidence intervals, regression analysis, R-square.said, book make great companion piece first statistics class. book professor references code perform certain calculations, help understand ’s .way, let’s begin!","code":""},{"path":"whatisr.html","id":"whatisr","chapter":"2 What is R Programming?","heading":"2 What is R Programming?","text":"getting started R, need know R programming ’s special .R programming language built statisticians statistical analysis. well-suited towards running advanced analysis, building predictive models, machine learning, even routine data management.R open-source, makes free. people developed wanted make accessible anyone. Since , R moved beyond humble beginnings developed full-blown community developers.developers expanded R programming language allow advanced machine learning techniques, application development, website development, even publishing digital books, ’re reading book now.expansion possible packages. Packages allow individual developers teams share new functionality broader community.best thing R programming language. ’s vast community, filled individuals, teams, whole organizations, regularly contribute improve R.provides us multiple options accomplishing goals. find package confusing hard use, ’s good possibility finding another ’s easier intuitive.’re wondering ’s catch, : learn basics first.One basic concepts include objects. ’ll cover extensively another chapter, R object-oriented programming language. means succeed , understand various object types ’re used.sounds overwhelming, don’t worry. ’s easier think. focusing core components go long way helping succeed R. ’ll find key principles show throughout R journey.","code":""},{"path":"whatisr.html","id":"is-r-the-best-statistical-programming-language","chapter":"2 What is R Programming?","heading":"2.1 Is R the Best Statistical Programming Language?","text":"’s matter debate boy people debate . great thing R , unlike many open-source programming languages used data science, originally built statistics.makes default functionality well-suited towards statisticians researchers alike. ’s quite possible , researcher analyst, produce analysis need without compiling large list extra packages.two big competitors R hear often SAS Python.SAS statistical programming language built -profit company. ’s opposite open-source, means pay money use . ’s necessarily bad thing though. means ’s rigorous quality testing ’s people expect software costs money. R packages may rigorously quality checked.SAS Institute (people make SAS) lot market power . ingrained academia pharmaceutical research. Even though R Python preferred choices newer companies younger professionals, SAS advantage legacy code.’re probably familiar term haven’t ever programmed . means practical sense even R Python better alternatives SAS, cost organization lot money time go back re-write automated, enterprise-wide code.Python interesting competitor R, mostly wasn’t built statistical programming. Like R, ’s open-source led data scientists building packages make statistical programming possible.Python probably popular data scientists researchers statisticians. Since data scientists often joined hip computer programmers, naturally lends work.worked company ran ETL (extract, transform, load) processes Python. Since data engineers architects already used Python purpose, wasn’t difficult learn use data science well.Python better R? don’t know haven’t programmed much Python. opinion, R easier learn people ’ve already programmed SQL, since direct syntax. people say Python easier learn programming newbies ’s written like English language. didn’t find case, .people also say Python better enterprise-level “production” grade solutions. don’t really believe either. Since started writing book, ’ve helped administer data science tools clients. ’ve learned experience Python tough programming language manage, administrative perspective. lots little rules nuances, operating system use, manner install Python versions, packages, environments.reasons, suggest learning R. ’s easier download, easier manage, easier learn experience – especially individuals.","code":""},{"path":"whatisr.html","id":"will-learning-r-over-python-impact-job-opportunities","chapter":"2 What is R Programming?","heading":"2.2 Will Learning R Over Python Impact Job Opportunities?","text":"researcher data analyst, may eye job market. Many people wonder whether Python leads job opportunities compared R (vice versa).good news .job market data scientists favors data scientists companies hire . reason, companies can’t picky skill sets hire .’s led many data science software companies making products “tool agnostic.” example, RStudio’s enterprise software actually allows Python development. Python equivalents RStudio often allow R development well.help ensure data scientists can best work using “language already know.”","code":""},{"path":"whatisr.html","id":"things-to-remember","chapter":"2 What is R Programming?","heading":"2.3 Things to Remember","text":"R programming free allows advanced statistical programmingR managed community developers, contribute growth packagesYou must understand object types succeed RPicking R Python (vice versa) probably won’t big impact career opportunities","code":""},{"path":"setup.html","id":"setup","chapter":"3 How to Get Started with R and RStudio","heading":"3 How to Get Started with R and RStudio","text":"chapter tell download R RStudio. also explain differences two tools navigate user interfaces.already setup two tools, feel free skip ahead next chapter. However, ’re still unsure navigate tools, may find certain sections useful.","code":""},{"path":"setup.html","id":"how-to-download-r","chapter":"3 How to Get Started with R and RStudio","heading":"3.1 How to Download R","text":"download R, go website: https://www.r-project.org/go series options screens download R. Don’t worry. ’ll explain along way.First, ’ll select download R link first paragraph.Second, ’ll select CRAN mirror. Select one ’s closest . example, live Lawrence, Kansas. conveniently CRAN mirror town! live Melbourne, Australia, ’ll select mirror hosted University Melbourne.Don’t worry. ’s much difference user mirrors. simply helps optimize ability download packages nearby source, rather country world.Third, ’ll select option operating system:take page can select latest release:Download install latest release.","code":""},{"path":"setup.html","id":"understanding-base-rs-user-interface","chapter":"3 How to Get Started with R and RStudio","heading":"3.2 Understanding Base R’s User Interface","text":"won’t focus much R interface. won’t use much book. ’ll using RStudio (bit). However, let’s go ahead open R see looks like.Mac, icon. can find applications folder (Macs). Let’s go ahead open .open , see R Console. R Console type commands. ’ll continue use console RStudio later.Go ahead input 2*2 get feel . can hit Ctrl+Enter Windows version Command+Enter Mac OS run command.may notice, R console doesn’t allow go back edit previously executed commands.order save edit script, ’ll need create document. document context basically just text file saves code want reference later.Go File menu select New Document. two windows afterwards like screenshot :Go ahead copy paste code document:Highlight different parts code hit Command-Enter Ctrl-Enter see interacts console. (may ask re-select CRAN mirror. Go ahead re-select one used download.)Saving scripts way allows modify code re-execute console.’ll go detail input analyze data later.Go ahead close R now. need save anything.","code":"\n  install.packages(\"faraway\")\n  library(faraway)\n  data(hprice)\n  head(hprice)"},{"path":"setup.html","id":"limitations-of-r-base","chapter":"3 How to Get Started with R and RStudio","heading":"3.3 Limitations of R Base","text":"R console base version simple interface. Sometimes nice don’t get overwhelmed information displayed RStudio, ’ll cover second. need run calculations know data set well, good setup.One big downside console can’t display large amounts data.look screen shot , attempted review metadata US Census Bureau. used function View() look table cleaner format. table semi-functional, ’s hard scroll . ’s also columns can’t even fit onto screen.order use original R interface analysis, ’d find different way view data pulled.’s RStudio comes handy.","code":""},{"path":"setup.html","id":"what-is-rstudio","chapter":"3 How to Get Started with R and RStudio","heading":"3.4 What is RStudio?","text":"RStudio IDE (integrated development environment) allows interactivity visually keep track ’re .simpler words, ’s handy user interface programming R.’s far easier get started understand R programming language using RStudio. makes importing data packages easier. also makes easier manage visually review data packages loaded. lastly, ’s just plain nicer looking.book primarily use RStudio examples. suggest downloading get best use material.","code":""},{"path":"setup.html","id":"how-to-download-rstudio","chapter":"3 How to Get Started with R and RStudio","heading":"3.5 How to Download RStudio","text":"download RStudio, go website: https://rstudio.com/products/rstudio/download/Scroll ’ll see big blue button download latest version RStudio.can tell RStudio designed end-user mind painless download compared base R.Go ahead install download finishes.’ll see icon like appear applications folder (Macs). Go ahead open .","code":""},{"path":"setup.html","id":"understanding-rstudio-interface","chapter":"3 How to Get Started with R and RStudio","heading":"3.6 Understanding RStudio Interface","text":"RStudio interface broken four panes. default pane setting following:SourceConsoleEnvironment, History, ConnectionsFiles, Plots, Package, Help, ViewerThe Source pane top left handy one.pane displays saved scripts opened new ones ’re currently writing.may able see pane yet. Especially ’ve never opened saved script . view source pane, go top menu click File, New File, R Script.open blank, untitled script edit.source pane can also show loaded data sets well.recall, said base R limitation couldn’t show really large data sets clean way. RStudio really comes handy. Census data set attempted view earlier:looked base R:console pane bottom left less base R console reviewed earlier. allows enter commands.However, won’t able save commands script unless write source pane . ’s similar base R new document.pane also Terminal Jobs tab (latter installed). Terminal allows enter commands interact computer. used think wasn’t useful feature RStudio, ’ve actually grown like . make file management easier, learn invest time basic “command-line interface” commands.top right pane includes Environment, History, Connections tabular options.Environment handy ’s something sets RStudio apart base version. shows objects assigned names saved environment.’ll go objects extensively next chapter. need remember environment tab top right pane tells temporarily saved.History section one don’t use often, see people find handy. tells commands ’ve run R session. anything input console show record.Connection tab useful want connect database data warehouse.’re researcher, may use much. work databases capacity, make easier simply query data directly database, opposed importing via CSV files spreadsheets.bottom right pane useful addition provided RStudio. contains separate tab Files, Plots, Packages, Help, Viewer.’m going start Packages tab. recall, said packages makes R useful programming language. allows customize import functions suit needs.useful little tab. open previously saved script, may find functions need package execute. tab can tell whether need install package simply need re-load .whole chapter later book focused finding packages, installing packages, loading packages.Plots tab displays plots created using graphical commands. ’ll cover detail later chapter.Help super helpful tab. can find extensive R documentation explains many functionality R operates. also display information look packages functions ’ve downloaded.ever add ? function, display documentation help section.Try adding following command R console see happens:’s look like screen:Don’t forget trick! helps lot!Lastly, Files Viewer tab.Files tab displays files can open RStudio given folder. file directory defaults project directory () user directory computer. Whenever script references another file (data set), help determine file path specify.Viewer tab allows display non-R related outputs, website JavaScript graphics. don’t use one often .","code":"\n  ?lm"},{"path":"setup.html","id":"useful-project-organization-tip","chapter":"3 How to Get Started with R and RStudio","heading":"3.7 Useful Project Organization Tip","text":"initially start RStudio, ’s hard keep things clean organized. move new projects analysis, Files tab fill items.keep things organized, suggest creating new Project. RStudio simple way create new folders neatly batch scripts together based project.create project, go top-right screen, select Project: (None), select New Project…:haven’t yet created folder store scripts, can select New Directory. already created folder, can select Existing Directory:New Directory option allow determine project type. beginner, ’d want select New Project option. options advanced R users.eventually asked create name new folder, select existing folder project.name folder (directory) determine name project. proceed steps, RStudio create .Rproj file keeps track configurations. save new scripts, automatically save folder.project name also appear drop-menu top-right screen.can use menu navigate back forth projects.","code":""},{"path":"setup.html","id":"things-to-remember-1","chapter":"3 How to Get Started with R and RStudio","heading":"3.8 Things to Remember","text":"R packages contains new functions allow use R specific purposesRStudio user friendly interface","code":""},{"path":"objects.html","id":"objects","chapter":"4 Object Types in R Programming","heading":"4 Object Types in R Programming","text":"R uses objects store interact data various object types. probably means little now, understanding differences make R programming easier – whatever R programming goals.fact, say ’s better understand objects interact one another memorizing every base function package .’s different approach took learning R. learned R, went straight learning base functions. know, cool stuff regression analysis confidence intervals whatnot.didn’t work well . coming SQL background thought data worked similar way R.started learning object types first, ’ve saved lot time. ’ve done less data manipulation SQL Excel made simpler, scalable R code.","code":""},{"path":"objects.html","id":"why-do-objects-matter","chapter":"4 Object Types in R Programming","heading":"4.1 Why Do Objects Matter?","text":"Almost everything program R one following:Reads objectModifies objectProduces objectCalls upon pre-existing objectFor example, simple code utilizes five different object types:code calculating confidence intervals calls upon base function, evaluates existing list, creates several vectors array perform analysis, outputs matrix. five objects. (can see function’s script pasting stats::confint.lm console.)Understanding help understand R can seem “guess” ’s supposed based data inputs.","code":"\n  confint.lm(happy_model)"},{"path":"objects.html","id":"understanding-object-types-makes-it-easier-to-transform-and-analyze","chapter":"4 Object Types in R Programming","heading":"4.2 Understanding Object Types Makes It Easier to Transform and Analyze","text":"Pulling data one object type different pulling data another. makes confusing people learned data SQL, opposed programming languages.example, following code select data types SQL:’s different R. Data selection R depends object type.example, using command [6] next object name select single value vector object…won’t work list object …learn select, transform, analyze data R requires learn underlying structure first. , everything else makes sense.","code":"  SELECT\n    Field1,\n    Field2,\n    Field3,\n    Field4\n  FROM\n    Data_Set\n  money[6]## [1] 175\n  happy_model[6]## $assign\n## [1] 0 1 2"},{"path":"objects.html","id":"the-basic-objects-to-remember","chapter":"4 Object Types in R Programming","heading":"4.3 The Basic Objects to Remember","text":"common objects R:VectorsMatrices / ArraysData FramesListsFactorsFunctionsWe won’t talk functions chapter since need chapter explain work.","code":""},{"path":"objects.html","id":"vectors","chapter":"4 Object Types in R Programming","heading":"4.4 Vectors","text":"Vector basic object within R seven “modes” vectors: logical, numeric, integer, complex, character, date, raw.seems lot remember, don’t worry. ’d focus remembering logical, numeric, character right now. ones ’ll use often. Others ’ll cover needed.Vectors can one mode time. means plain English R can’t word number vector.can use code create view logical vector:code create vector using c(input, input) notation. assigns vector name v1 using <– notation. (shortcut <- command Option + “-” Macs Alt + “-” Windows.)build character vector way, use c(\"input\", \"input\") notation (quotations “…”) instead.numeric vector (like name suggests) looks like :code used c(n1:n2) notation create range values n1 n2, n1 1 n2 4. can also use notations c(n1, n2, n3, n4) something like c(n1:n4, n5:n6).Play around code see kind numeric vectors can make!said vectors can one “mode” data type time. means attempt mix numbers logical value character, simply changes values character.code takes previously made vectors, one numeric character, combines single vector. can see quotation ” ” marks around output, ’s changed numeric values characters.vector seems basic like data sets ’ll using. might make ask – even use vectors?Yes. Yes, .Many complicated object types comprised individual vectors. Also, functions also use vectors extensively. produce vectors output. Others require vectors input.example, script uses function censusapi package. create vector beforehand use input function .can use vectors way larger scale. example, write long script many functions references, vectors allow create set parameters beginning. can call upon later script, makes efficient write edit.","code":"\n  v1 <- c(TRUE,FALSE,TRUE)\n  v1## [1]  TRUE FALSE  TRUE\n  v2 <- c(\"Hola\",\"Howdy\",\"Hello\")\n  v2## [1] \"Hola\"  \"Howdy\" \"Hello\"\n  v3 <- c(1:3)\n  v3## [1] 1 2 3\n  v4 <- c(4:6,1:7)\n  v4##  [1] 4 5 6 1 2 3 4 5 6 7\n  v5 <- c(1,5,5,2,1,4)\n  v5## [1] 1 5 5 2 1 4\n  v6 <- c(v2,v3)\n  v6## [1] \"Hola\"  \"Howdy\" \"Hello\" \"1\"     \"2\"     \"3\"\n  variable_list <- c(\"B15001_003E\",\"B15001_004E\",\"B15001_005E\",\n                     \"B15001_044E\",\"B15001_045E\",\"B15001_046E\")\n  getCensus(name=\"acs/acs5\",\n            vintage=\"2018\",\n            vars=c(\"NAME\",variable_list),\n            region=\"state:*\")"},{"path":"objects.html","id":"matrices-and-arrays","chapter":"4 Object Types in R Programming","heading":"4.5 Matrices and Arrays","text":"Matrices arrays R multi-dimensional vectors. Matrices multiple rows columns. Arrays matrices two dimensions. (distinction bit).Like vector counterpart, matrix / array values must mode data type – mix. means can’t numeric value alongside character value.’s example matrix:R programmers want ? comes back R’s use statistical programming language. example, multiple linear regression often combined variables, involves multiplying two matrices together.Providing two object types R solely numeric values makes easier.example, can multiply two matrices together %*% command get results using matrix algebra.’s hand.\\[\n \\begin{bmatrix}\n  2 & 1\\\\\n  0 & 3 \\\\\n \\end{bmatrix}\n \\begin{bmatrix}\n  5\\\\\n  7\\\\\n \\end{bmatrix}\n =\n \\begin{bmatrix}\n  17\\\\\n  21\\\\\n \\end{bmatrix}\n\\]Unless ’re building functions calculate , doubt ’ll use matrices arrays much. However, ’s handy know can used. ’re often output functions well.Arrays complex simple 2-D counterpart. Instead single set rows columns, ’ll multiple dimensions added top.output looks like gibberish, don’t worry – people think ’s confusing first see . ’s R user interface doesn’t make visually intuitive array operates.Let’s use picture visualize instead. Think matrix separate entity within array…array simply stack top …Since arrays three dimensions merely stacked matrices, means matrix within array must number columns rows others.","code":"\n  matrix1 <- matrix(c(2,0,1,3),nrow=2,ncol=2)\n  matrix1##      [,1] [,2]\n## [1,]    2    1\n## [2,]    0    3\n  matrix1 <- matrix(c(2,0,1,3),nrow=2,ncol=2)\n  matrix1##      [,1] [,2]\n## [1,]    2    1\n## [2,]    0    3\n  matrix2 <- matrix(c(5,7),nrow=2)\n  matrix2##      [,1]\n## [1,]    5\n## [2,]    7\n  matrix1 %*% matrix2 #multiplication##      [,1]\n## [1,]   17\n## [2,]   21\n  matrix3 <- matrix(c(2,0,1,4,5,2,3,4),nrow=4,ncol=2)\n  matrix4 <- matrix(c(4,3,5,2,1,6,4,5),nrow=4,ncol=2)\n  matrix5 <- matrix(c(1,3,1,2,3,5,6,2),nrow=4,ncol=2)\n  array1 <- array(c(matrix3,matrix4,matrix5),\n                  dim=c(4,2,3))\n  array1## , , 1\n## \n##      [,1] [,2]\n## [1,]    2    5\n## [2,]    0    2\n## [3,]    1    3\n## [4,]    4    4\n## \n## , , 2\n## \n##      [,1] [,2]\n## [1,]    4    1\n## [2,]    3    6\n## [3,]    5    4\n## [4,]    2    5\n## \n## , , 3\n## \n##      [,1] [,2]\n## [1,]    1    3\n## [2,]    3    5\n## [3,]    1    6\n## [4,]    2    2"},{"path":"objects.html","id":"data-frames","chapter":"4 Object Types in R Programming","heading":"4.6 Data Frames","text":"Data frame object type people feel comfortable using. ’s organized referenced columns can many, many rows. column contains amount rows columns. row number one column connected row number columns.importantly, can contain numeric character values! (Earth shattering, know!)like think data frame way combine vectors. matter fact, can build data frame just .Take code run . ’ll see make individual vectors containing data James Bond movies1 combine data frame.use $ sign, can re-select individual vectors back .want select single column maintain data frame object type, use following code:’ll go detail selecting, transforming, analyzing data frames later . way go depends whether want make efficient code want make “readable” code analysts.","code":"\n  filmname <- c(\"Skyfall\",\"Thunderball\",\"Goldfinger\",\n                \"Spectre\",\"Live and Let Die\",\n                \"You Only Live Twice\",\n                \"The Spy Who Loved Me\",\"Casino Royale\",\n                \"Moonraker\",\"Diamonds Are Forever\",\n                \"Quantum of Solace\",\"From Russia with Love\",\n                \"Die Another Day\",\"Goldeneye\",\n                \"On Her Majesty's Secret Service\",\n                \"The World is Not Enough\",\n                \"For Your Eyes Only\",\"Tomorrow Never Dies\",\n                \"The Man with the Golden Gun\",\n                \"Dr. No\",\"Octopussy\",\n                \"The Living Daylights\",\"A View to a Kill\",\n                \"Licence to Kill\")\n  year <- c(\"2012\",\"1965\",\"1964\",\"2015\",\n            \"1973\",\"1967\",\"1977\",\"2006\",\n            \"1979\",\"1971\",\"2008\",\"1963\",\n            \"2002\",\"1995\",\"1969\",\"1999\",\n            \"1981\",\"1997\",\"1974\",\"1962\",\n            \"1983\",\"1987\",\"1985\",\"1989\")\n  actor <- c(\"Daniel Craig\",\"Sean Connery\",\n             \"Sean Connery\",\"Daniel Craig\",\n             \"Roger Moore\",\"Sean Connery\",\n             \"Roger Moore\",\"Daniel Craig\",\n             \"Roger Moore\",\"Sean Connery\",\n             \"Daniel Craig\",\"Sean Connery\",\n             \"Pierce Brosnan\",\"Pierce Brosnan\",\n             \"George Lazenby\",\"Pierce Brosnan\",\n             \"Roger Moore\",\"Pierce Brosnan\",\n             \"Roger Moore\",\"Sean Connery\",\n             \"Roger Moore\",\"Timothy Dalton\",\n             \"Roger Moore\",\"Timothy Dalton\")\n  gross <- c(1108561008,1014941117,912257512,\n             880669186,825110761,756544419,\n             692713752,669789482,655872400,\n             648514469,622246378,576277964,\n             543639638,529548711,505899782,\n             491617153,486468881,478946402,\n             448249281,440759072,426244352,\n             381088866,321172633,285157191)/1000000\n  bond <- data.frame(filmname=filmname,\n                     year=year,\n                     actor=actor,\n                     gross=gross)\n  bond$filmname##  [1] \"Skyfall\"                         \"Thunderball\"                    \n##  [3] \"Goldfinger\"                      \"Spectre\"                        \n##  [5] \"Live and Let Die\"                \"You Only Live Twice\"            \n##  [7] \"The Spy Who Loved Me\"            \"Casino Royale\"                  \n##  [9] \"Moonraker\"                       \"Diamonds Are Forever\"           \n## [11] \"Quantum of Solace\"               \"From Russia with Love\"          \n## [13] \"Die Another Day\"                 \"Goldeneye\"                      \n## [15] \"On Her Majesty's Secret Service\" \"The World is Not Enough\"        \n## [17] \"For Your Eyes Only\"              \"Tomorrow Never Dies\"            \n## [19] \"The Man with the Golden Gun\"     \"Dr. No\"                         \n## [21] \"Octopussy\"                       \"The Living Daylights\"           \n## [23] \"A View to a Kill\"                \"Licence to Kill\"\n  bond[1]##                           filmname\n## 1                          Skyfall\n## 2                      Thunderball\n## 3                       Goldfinger\n## 4                          Spectre\n## 5                 Live and Let Die\n## 6              You Only Live Twice\n## 7             The Spy Who Loved Me\n## 8                    Casino Royale\n## 9                        Moonraker\n## 10            Diamonds Are Forever\n## 11               Quantum of Solace\n## 12           From Russia with Love\n## 13                 Die Another Day\n## 14                       Goldeneye\n## 15 On Her Majesty's Secret Service\n## 16         The World is Not Enough\n## 17              For Your Eyes Only\n## 18             Tomorrow Never Dies\n## 19     The Man with the Golden Gun\n## 20                          Dr. No\n## 21                       Octopussy\n## 22            The Living Daylights\n## 23                A View to a Kill\n## 24                 Licence to Kill"},{"path":"objects.html","id":"factors","chapter":"4 Object Types in R Programming","heading":"4.7 Factors","text":"Factors take vectors (data frame columns) create categories group values. Confused? ’s actually fairly simple.Think back data frame built Bond films. use code , ’ll see first six rows:Now let’s say want short list Bond actors. ’ll notice data set, actor names like “Daniel Craig” “Sean Connery” used repeatedly. basically ways group data frame common field name - actor played Bond.tried get list actors using levels() function, wouldn’t work.’s hasn’t factored yet.real simply fix. Simply use factor() function assign field name within data frame.also show environment tab top left.R used automatically factor character variables . However, functionality removed recent update.may see factors --important object type, ’s true. comes handy regression analysis. Especially categorical variables numeric.example, Bond data frame may include actor name. simply number 1 6 actor - Sean Connery 1 Daniel Craig 6. means regression analysis ’ve analyzed actor continuous variable default!also comes experiments analyze impact medicine. ’s uncommon label one drug 1 another drug 2. means ’d factor drug codes analysis reads correctly.","code":"\n  head(bond)##              filmname year        actor     gross\n## 1             Skyfall 2012 Daniel Craig 1108.5610\n## 2         Thunderball 1965 Sean Connery 1014.9411\n## 3          Goldfinger 1964 Sean Connery  912.2575\n## 4             Spectre 2015 Daniel Craig  880.6692\n## 5    Live and Let Die 1973  Roger Moore  825.1108\n## 6 You Only Live Twice 1967 Sean Connery  756.5444\n  levels(bond$actor)## NULL\n  bond$actor <- factor(bond$actor)\n  levels(bond$actor)## [1] \"Daniel Craig\"   \"George Lazenby\" \"Pierce Brosnan\" \"Roger Moore\"   \n## [5] \"Sean Connery\"   \"Timothy Dalton\""},{"path":"objects.html","id":"lists","chapter":"4 Object Types in R Programming","heading":"4.8 Lists","text":"Lists objects usually store objects nice bundle. objects vectors, lists, data frames, etc.Many complex R base functions produce lists. common one produced lm() function.Use code build model James Bond data:Now can see list produces environment tab. can see, ’s lot list.can also see ’s list using following code:gets heart ’s important know ’re dealing list. changes way select components list.example, let’s say want just coefficients model built.can use $ symbol .However, want select single coefficient, use number value afterwards.’s ’s important know ’re pulling list . changes way select key parts data.","code":"\n  bondmodel <- lm(gross~actor,data=bond)\n  names(bondmodel)##  [1] \"coefficients\"  \"residuals\"     \"effects\"       \"rank\"         \n##  [5] \"fitted.values\" \"assign\"        \"qr\"            \"df.residual\"  \n##  [9] \"contrasts\"     \"xlevels\"       \"call\"          \"terms\"        \n## [13] \"model\"\n  bondmodel$coefficients##         (Intercept) actorGeorge Lazenby actorPierce Brosnan    actorRoger Moore \n##           820.31651          -314.41673          -309.37854          -269.48336 \n##   actorSean Connery actorTimothy Dalton \n##           -95.43409          -487.19349\n  bondmodel$coefficients[4]## actorRoger Moore \n##        -269.4834"},{"path":"objects.html","id":"functions","chapter":"4 Object Types in R Programming","heading":"4.9 Functions","text":"Functions also object. time, ’ll using built-function R base code package loaded.However, may find building functions, handy don’t want search pre-existing one need something unique situation.’ll go detail functions later chapter complexity.","code":""},{"path":"objects.html","id":"things-to-remember-2","chapter":"4 Object Types in R Programming","heading":"4.10 Things to Remember","text":"key understanding R understanding objectsThe object type changes way ’ll read, transform, produce data","code":""},{"path":"objects.html","id":"exercises","chapter":"4 Object Types in R Programming","heading":"4.11 Exercises","text":"Try see can answer following questions. Answers back book!printed output object. type object ?printed output object. type object ?want select column mpg data frame mtcars. following code output vector data frame?want select column mpg data frame mtcars. following code output vector data frame?want select column gear data frame mtcars, want treat categorical variable. turn column factor? (can load data set using data(mtcars))","code":"## , , 1\n## \n##           [,1]     [,2]\n## [1,] 15.864838 11.23700\n## [2,]  9.306884 22.23843\n## \n## , , 2\n## \n##          [,1]     [,2]\n## [1,] 23.72055 19.57388\n## [2,] 18.21969 21.93573\n## \n## , , 3\n## \n##           [,1]     [,2]\n## [1,]  9.503213 9.667211\n## [2,] 10.788929 9.026587## [1]  5.106328 11.586182  9.622173 15.599097\n  data(mtcars)\n  mtcars$mpg\n  data(mtcars)\n  mtcars[1]"},{"path":"baserfilter.html","id":"baserfilter","chapter":"5 How to Filter and Transform Objects in Base R","heading":"5 How to Filter and Transform Objects in Base R","text":"last chapter, explained various object types R. Now want learn filter transform objects. Notice didn’t say filter transform “data”? ’s methods use handle data R heavily depend object type.explain methods though, need cover operators.","code":""},{"path":"baserfilter.html","id":"what-are-operators","chapter":"5 How to Filter and Transform Objects in Base R","heading":"5.1 What Are Operators?","text":"’re new programming, ’re probably familiar term operator. Operators, plain English, modify evaluate data. ’s important data transformation filtering.two types operators R: arithmetic logical.Arithmetic operators cover tasks like addition, subtraction, etc. useful data transformation used several examples later.common arithmetic operators:Logical operators takes data generates TRUE FALSE output, based whether data meets requirement. helpful filtering data transforming.common logical operators:Don’t worry ’re unsure use just yet. ’ll see examples next sections. just easy reference later.","code":""},{"path":"baserfilter.html","id":"how-to-filter-and-transform-data-from-a-vector","chapter":"5 How to Filter and Transform Objects in Base R","heading":"5.2 How to Filter and Transform Data From a Vector","text":"Vectors easiest object type filter. transforming data within .want reference view entire vector, simply enter name assigned object.(Remember: <- command allows name object. can use Option + “-”  Macs Alt + “-” Windows short-cut <-.)also can select single entry vector using [n] notation.can see, script selected third value vector.can select range entries using [n:n] notation., ’ve seen , can create new vector referencing old vectors!can also use base R functions filter data.example, may want see minimum maximum value vector. can use max() min() command .can use logical operators well. example , use >= & operators filter values.can also use | (“”) operator find values meet criteria. example, filter vector “Hola” “Howdy.”probably noticed logical operators return TRUE FALSE statement. makes sense since logical argument ’s evaluated. However, may want see actual values meet argument. isn’t important example like , come later complex objects.show actual values logical argument true, use object_name[argument] notation.next examples, filter vectors values meet arguments used last examples:examples , simply took logical argument plugged brackets.can also change data easily comes numeric vectors. example, vector box office revenue James Bond films.Copy paste script R console execute:can see, values large. make analysis easier, can use one arithmetic operators showed earlier.scenario, want make values smaller. ’m going divide using / operator.may noticed reassigned vector name “gross”. can want overwrite previous object assignment. Careful though. changes permanent. means reverse , may need run earlier script re-generate original data re-import data set.can also calculate individual values way .can re-assign value particular part vector using methods described <- notation.example, can see re-assign values based location:","code":"\n  v5 <- c(1,5,5,2,1,4)\n  v5## [1] 1 5 5 2 1 4\n  v5 <- c(1,5,5,2,1,4)\n  v5[3]## [1] 5\n  v5 <- c(1,5,5,2,1,4)\n  v5[3:4]## [1] 5 2\n  v2 <- c(\"Hola\",\"Howdy\",\"Hello\")\n  v7 <- c(2:4)\n  v8 <- c(v2,v7)\n  v8## [1] \"Hola\"  \"Howdy\" \"Hello\" \"2\"     \"3\"     \"4\"\n  v5## [1] 1 5 5 2 1 4\n  max(v5) # Max value## [1] 5\n  min(v5) # Min value## [1] 1\n  v5 >= 2 # Values greater than 2## [1] FALSE  TRUE  TRUE  TRUE FALSE  TRUE\n  v5 >= 3 & v5 <= 5 # Values between 3 and 5## [1] FALSE  TRUE  TRUE FALSE FALSE  TRUE\n  v2## [1] \"Hola\"  \"Howdy\" \"Hello\"\n  v2 == \"Hola\" | v2 == \"Howdy\"## [1]  TRUE  TRUE FALSE\n  v5[v5>=2]## [1] 5 5 2 4\n  v5[v5 >= 3 & v5 <= 5]## [1] 5 5 4\n  v2[v2 == \"Hola\" | v2 == \"Howdy\"]## [1] \"Hola\"  \"Howdy\"\n  gross <- \n    c(1108561008,1014941117,912257512,880669186,\n      825110761,756544419,692713752,669789482,\n      655872400,648514469,622246378,576277964,\n      543639638,529548711,505899782,491617153,\n      486468881,478946402,448249281,440759072,\n      426244352,381088866,321172633,285157191)\n  gross\n  gross <- gross/1000000\n  gross\n  gross <- \n    c(1108561008,1014941117,912257512,880669186,\n      825110761,756544419,692713752,669789482,\n      655872400,648514469,622246378,576277964,\n      543639638,529548711,505899782,491617153,\n      486468881,478946402,448249281,440759072,\n      426244352,381088866,321172633,285157191)\n  gross[4]  ## [1] 880669186\n  gross[4]/100000## [1] 8806.692\n  v8 <- c(1,5,5,2,1,4) # Creates the original vector\n  v8[6] <- 8 # Replaces the sixth value with an 8\n  v8[1:3] <- c(4,3,1) # Replaces the first three values\n  v8## [1] 4 3 1 2 1 8"},{"path":"baserfilter.html","id":"how-to-filter-and-transform-data-from-a-matrix","chapter":"5 How to Filter and Transform Objects in Base R","heading":"5.3 How to Filter and Transform Data From a Matrix","text":"Filtering data within matrix similar different vector.’s similar can use [n] notation select single entry. done vector.can matrix. run code , ’ll re-create view matrix used last chapter:’ll select fourth value matrix using [4] command:Now isn’t practical matrix. may need select value specific row column instead. matrices different vector. ’ll want use [r,c] command determine values want.example , select second row first column matrix:can make easier . Instead specifying row column numbers, can give names. way, can use [row_name,column_name] notation select data matrix., give previously created matrix row column names:can also apply vector filtering methods matrices. example, want see values greater 0.Funny enough though, can’t return actual values meet criteria matrix form. ’ll turn vector. ’s output may number columns rows original matrix. R assumes ’ll need one-dimensional object output.can use techniques outlined vectors transform data within matrix. Copy paste codes R console see results. Feel free play around inputs see happens.Like vectors, can transform data within matrix using arithmetic operators discussed earlier.can also use operators combine matrices. ’ll need matrices illustrate examples though. Take code execute console, want follow along examples.’s important remember dimensions matrices. Attempting use addition two matrices without dimensions won’t work.Matrix 1 2 dimensions, return error:However, Matrix 1 Matrix 6 dimensions execute:Multiplying two matrices together can misleading. example, using simple * operator merely multiply corresponding values two matrices dimensions. Confused? Look two matrices look output:Entry [1,1] first matrix 2. Entry [1,1] second matrix 4. 2 x 4 = 8. shows us multiplication used true matrix multiplication.attempt use * operator Matrix 1 Matrix 2 though, get error:’s two matrices share dimensions.However, can generate single matrix two matrices using matrix algebra. , use %*% operator:can also divide matrix another using %/% operator:Just remember difference matrix interact *, %*%, /, %/% operators.","code":"\n  v5[2]## [1] 5\n  matrix1 <- matrix(c(2,0,1,3),nrow=2,ncol=2)\n  matrix1##      [,1] [,2]\n## [1,]    2    1\n## [2,]    0    3\n  matrix1[4]## [1] 3\n  matrix1[2,1]## [1] 0\n  colnames(matrix1) <- c(\"Col1\",\"Col2\")\n  rownames(matrix1) <- c(\"Row1\",\"Row2\")\n  matrix1[\"Row2\",\"Col1\"]## [1] 0\n  matrix1 > 0 # Returns true or false##       Col1 Col2\n## Row1  TRUE TRUE\n## Row2 FALSE TRUE\n  matrix1[matrix1 > 0]## [1] 2 1 3\n  matrix1 <- matrix(c(2,0,1,3),nrow=2,ncol=2)  \n  matrix1##      [,1] [,2]\n## [1,]    2    1\n## [2,]    0    3\n  matrix1[3] <- 5\n  matrix1##      [,1] [,2]\n## [1,]    2    5\n## [2,]    0    3\n  matrix1[,2] <- 2\n  matrix1##      [,1] [,2]\n## [1,]    2    2\n## [2,]    0    2\n  matrix1[2,2] <- 0\n  matrix1##      [,1] [,2]\n## [1,]    2    2\n## [2,]    0    0\n  matrix1##      [,1] [,2]\n## [1,]    2    2\n## [2,]    0    0\n  matrix1 + 2##      [,1] [,2]\n## [1,]    4    4\n## [2,]    2    2\n  matrix1 - 4##      [,1] [,2]\n## [1,]   -2   -2\n## [2,]   -4   -4\n  matrix1 ^ 3##      [,1] [,2]\n## [1,]    8    8\n## [2,]    0    0\n  matrix1 * 5##      [,1] [,2]\n## [1,]   10   10\n## [2,]    0    0\n  matrix1 <- matrix(c(2,0,1,3),nrow=2,ncol=2)\n  matrix1\n  matrix2 <- matrix(c(5,7),nrow=2)\n  matrix2\n  matrix6 <- matrix(c(4,3,1,3),nrow=2,ncol=2)\n  matrix6\n  matrix1 + matrix2## Error in matrix1 + matrix2: non-conformable arrays\n  matrix1 + matrix6##      [,1] [,2]\n## [1,]    6    2\n## [2,]    3    6\n  matrix1##      [,1] [,2]\n## [1,]    2    1\n## [2,]    0    3\n  matrix6##      [,1] [,2]\n## [1,]    4    1\n## [2,]    3    3\n  matrix1 * matrix6##      [,1] [,2]\n## [1,]    8    1\n## [2,]    0    9\n  matrix1##      [,1] [,2]\n## [1,]    2    1\n## [2,]    0    3\n  matrix2##      [,1]\n## [1,]    5\n## [2,]    7\n  matrix1 * matrix2## Error in matrix1 * matrix2: non-conformable arrays\n  matrix7 <- matrix1 %*% matrix2  \n  matrix7##      [,1]\n## [1,]   17\n## [2,]   21\n  matrix7 %/% matrix2##      [,1]\n## [1,]    3\n## [2,]    3"},{"path":"baserfilter.html","id":"how-to-filter-and-transform-data-from-arrays","chapter":"5 How to Filter and Transform Objects in Base R","heading":"5.4 How to Filter and Transform Data from Arrays","text":"Selecting data arrays similar . can select individual entry using [n] command. look , re-create array used last chapter. Copy paste code R console.script create three separate matrices, like see :stacks array:can select first twenty-second entry scripts :help visualize , highlighted fifth twenty-second values array illustration :arrays, selecting particular columns rows gets difficult arrays can multiple dimensions. introduces [r,c,d] notation., select entire second row every matrix array:may noticed “flipped” direction. R isn’t trying confuse . ’s merely displaying previous, individual matrix rows columns. column 1 shows results matrix 1 previous array. Keep mind interact arrays. output may always intuitive.illustration R processes command.First, R finds second row level array…R pivots places rows new array, column representing level array…Just like rows, can also select second column every matrix within array:illustration R processes command. R takes second column level array outputs . column output represents level array.can also select single level array specifying dimension, leaving row column numbers blank:finally, can even get specific entry selecting row, column, dimension array:can transform arrays way objects. examples can use techniques.Copy paste code computer get idea works:","code":"\n  matrix3 <- matrix(c(2,0,1,4,5,2,3,4),nrow=4,ncol=2)\n  matrix4 <- matrix(c(4,3,5,2,1,6,4,5),nrow=4,ncol=2)\n  matrix5 <- matrix(c(1,3,1,2,3,5,6,2),nrow=4,ncol=2)\n  array1 <- array(c(matrix3,matrix4,matrix5),\n                  dim=c(4,2,3))  \n  array1\n  array1[1]## [1] 2\n  array1[22]## [1] 5\n  array1[2,,]##      [,1] [,2] [,3]\n## [1,]    0    3    3\n## [2,]    2    6    5\n  array1[,2,]##      [,1] [,2] [,3]\n## [1,]    5    1    3\n## [2,]    2    6    5\n## [3,]    3    4    6\n## [4,]    4    5    2\n  array1[,,3]##      [,1] [,2]\n## [1,]    1    3\n## [2,]    3    5\n## [3,]    1    6\n## [4,]    2    2\n  array1[2,2,3]## [1] 5\n  array1 \n  #Changes the 2nd value of the entire array to a 2\n  array1[2] <- 2\n  array1\n  #Changes the 2nd column of each matrix to a 2\n  array1[,2,] <- 2\n  array1\n  #Changes the 2nd row, 1st column of the 3rd array to 0\n  array1[2,1,3] <- 0\n  array1\n  #Divided the 3rd matrix only by 3\n  array1[,,3] <- array1[,,3] / 3\n  array1"},{"path":"baserfilter.html","id":"how-to-filter-and-transform-data-from-a-data-frame","chapter":"5 How to Filter and Transform Objects in Base R","heading":"5.5 How to Filter and Transform Data from a Data Frame","text":"’s two approaches can take selecting data data frame. ’s “classic” approach, ’ll show section, ’s data plier approach.classic approach uses R base interact data frames. “data plier” approach uses package called dplyr transform data. dplyr syntax far readable, handy longer scripts.don’t want confuse learning two different methods, feel free skip section go chapter dplyr. section show classical approach.Personally though, still recommend learning methods. get hands-experience R programming, ’ll find different situations call different techniques.way, let’s get started classical approach.script load James Bond data frame last chapter:may recall, data frame basically comprised individual vectors equal lengths.can re-select individual vectors back data frame using $ notation:can also produce vector using [,c] notation. means ’re ignoring row selecting column number. generate result last example method.use [n] notation, ’ll select column , ’re keeping data frame structure.may noticed, [n] notation context works differently object types. data frames, [n] selects nth column nth data entry.can use [n:n] [,n:n] notation select multiple columns. presented data frame.select individual range rows, use [r,c] notation :can also exclude rows columns using negative - sign row column numbers:Just like object types, can use logical arithmetic operators, makes easy filter need.Note: things start get complicated data frame filtering suggest learning dplyr package.Let’s say want filter year. want Bond films made 1990.First, ’ll generate TRUE / FALSE output. Go ahead take script run console:Now, ’ll notice intentionally kept data frame object type. used bond$year notation, ’ve turned vector. ’ve made filtering data difficult later .Next, need plug another script:notice though, doesn’t cleanly give us information need.need make sure preserve columns structure. can simply adding comma / specifying column numbers:Adding filters become difficult . make script lot harder read. ’ll go better techniques multiple filters next chapter dplyr.","code":"\n  bond <- read.csv(\"https://raw.githubusercontent.com/taylorrodgers/bond/main/bond.csv\")\n  bond$filmname##  [1] \"Skyfall\"                         \"Thunderball\"                    \n##  [3] \"Goldfinger\"                      \"Spectre\"                        \n##  [5] \"Live and Let Die\"                \"You Only Live Twice\"            \n##  [7] \"The Spy Who Loved Me\"            \"Casino Royale\"                  \n##  [9] \"Moonraker\"                       \"Diamonds Are Forever\"           \n## [11] \"Quantum of Solace\"               \"From Russia with Love\"          \n## [13] \"Die Another Day\"                 \"Goldeneye\"                      \n## [15] \"On Her Majesty's Secret Service\" \"The World is Not Enough\"        \n## [17] \"For Your Eyes Only\"              \"Tomorrow Never Dies\"            \n## [19] \"The Man with the Golden Gun\"     \"Dr. No\"                         \n## [21] \"Octopussy\"                       \"The Living Daylights\"           \n## [23] \"A View to a Kill\"                \"Licence to Kill\"\n  bond[,1]##  [1] \"Skyfall\"                         \"Thunderball\"                    \n##  [3] \"Goldfinger\"                      \"Spectre\"                        \n##  [5] \"Live and Let Die\"                \"You Only Live Twice\"            \n##  [7] \"The Spy Who Loved Me\"            \"Casino Royale\"                  \n##  [9] \"Moonraker\"                       \"Diamonds Are Forever\"           \n## [11] \"Quantum of Solace\"               \"From Russia with Love\"          \n## [13] \"Die Another Day\"                 \"Goldeneye\"                      \n## [15] \"On Her Majesty's Secret Service\" \"The World is Not Enough\"        \n## [17] \"For Your Eyes Only\"              \"Tomorrow Never Dies\"            \n## [19] \"The Man with the Golden Gun\"     \"Dr. No\"                         \n## [21] \"Octopussy\"                       \"The Living Daylights\"           \n## [23] \"A View to a Kill\"                \"Licence to Kill\"\n  bond[1]##                           filmname\n## 1                          Skyfall\n## 2                      Thunderball\n## 3                       Goldfinger\n## 4                          Spectre\n## 5                 Live and Let Die\n## 6              You Only Live Twice\n## 7             The Spy Who Loved Me\n## 8                    Casino Royale\n## 9                        Moonraker\n## 10            Diamonds Are Forever\n## 11               Quantum of Solace\n## 12           From Russia with Love\n## 13                 Die Another Day\n## 14                       Goldeneye\n## 15 On Her Majesty's Secret Service\n## 16         The World is Not Enough\n## 17              For Your Eyes Only\n## 18             Tomorrow Never Dies\n## 19     The Man with the Golden Gun\n## 20                          Dr. No\n## 21                       Octopussy\n## 22            The Living Daylights\n## 23                A View to a Kill\n## 24                 Licence to Kill\n  bond[1:3]##                           filmname year          actor\n## 1                          Skyfall 2012   Daniel Craig\n## 2                      Thunderball 1965   Sean Connery\n## 3                       Goldfinger 1964   Sean Connery\n## 4                          Spectre 2015   Daniel Craig\n## 5                 Live and Let Die 1973    Roger Moore\n## 6              You Only Live Twice 1967   Sean Connery\n## 7             The Spy Who Loved Me 1977    Roger Moore\n## 8                    Casino Royale 2006   Daniel Craig\n## 9                        Moonraker 1979    Roger Moore\n## 10            Diamonds Are Forever 1971   Sean Connery\n## 11               Quantum of Solace 2008   Daniel Craig\n## 12           From Russia with Love 1963   Sean Connery\n## 13                 Die Another Day 2002 Pierce Brosnan\n## 14                       Goldeneye 1995 Pierce Brosnan\n## 15 On Her Majesty's Secret Service 1969 George Lazenby\n## 16         The World is Not Enough 1999 Pierce Brosnan\n## 17              For Your Eyes Only 1981    Roger Moore\n## 18             Tomorrow Never Dies 1997 Pierce Brosnan\n## 19     The Man with the Golden Gun 1974    Roger Moore\n## 20                          Dr. No 1962   Sean Connery\n## 21                       Octopussy 1983    Roger Moore\n## 22            The Living Daylights 1987 Timothy Dalton\n## 23                A View to a Kill 1985    Roger Moore\n## 24                 Licence to Kill 1989 Timothy Dalton\n  bond[,1:3]##                           filmname year          actor\n## 1                          Skyfall 2012   Daniel Craig\n## 2                      Thunderball 1965   Sean Connery\n## 3                       Goldfinger 1964   Sean Connery\n## 4                          Spectre 2015   Daniel Craig\n## 5                 Live and Let Die 1973    Roger Moore\n## 6              You Only Live Twice 1967   Sean Connery\n## 7             The Spy Who Loved Me 1977    Roger Moore\n## 8                    Casino Royale 2006   Daniel Craig\n## 9                        Moonraker 1979    Roger Moore\n## 10            Diamonds Are Forever 1971   Sean Connery\n## 11               Quantum of Solace 2008   Daniel Craig\n## 12           From Russia with Love 1963   Sean Connery\n## 13                 Die Another Day 2002 Pierce Brosnan\n## 14                       Goldeneye 1995 Pierce Brosnan\n## 15 On Her Majesty's Secret Service 1969 George Lazenby\n## 16         The World is Not Enough 1999 Pierce Brosnan\n## 17              For Your Eyes Only 1981    Roger Moore\n## 18             Tomorrow Never Dies 1997 Pierce Brosnan\n## 19     The Man with the Golden Gun 1974    Roger Moore\n## 20                          Dr. No 1962   Sean Connery\n## 21                       Octopussy 1983    Roger Moore\n## 22            The Living Daylights 1987 Timothy Dalton\n## 23                A View to a Kill 1985    Roger Moore\n## 24                 Licence to Kill 1989 Timothy Dalton\n  bond[1:3,] # Selects first three rows##      filmname year        actor     gross\n## 1     Skyfall 2012 Daniel Craig 1108.5610\n## 2 Thunderball 1965 Sean Connery 1014.9411\n## 3  Goldfinger 1964 Sean Connery  912.2575\n  bond[-1:-20,] # Excludes rows 1 through 20##                filmname year          actor    gross\n## 21            Octopussy 1983    Roger Moore 426.2444\n## 22 The Living Daylights 1987 Timothy Dalton 381.0889\n## 23     A View to a Kill 1985    Roger Moore 321.1726\n## 24      Licence to Kill 1989 Timothy Dalton 285.1572\n  bond[3,-4] # Row 3, excluding the 4th column##     filmname year        actor\n## 3 Goldfinger 1964 Sean Connery\n  bond[\"year\"]>=1990\n  bond[bond[\"year\"]>=1990]##  [1] \"Skyfall\"                 \"Spectre\"                \n##  [3] \"Casino Royale\"           \"Quantum of Solace\"      \n##  [5] \"Die Another Day\"         \"Goldeneye\"              \n##  [7] \"The World is Not Enough\" \"Tomorrow Never Dies\"    \n##  [9] \"2012\"                    \"2015\"                   \n## [11] \"2006\"                    \"2008\"                   \n## [13] \"2002\"                    \"1995\"                   \n## [15] \"1999\"                    \"1997\"                   \n## [17] \"Daniel Craig\"            \"Daniel Craig\"           \n## [19] \"Daniel Craig\"            \"Daniel Craig\"           \n## [21] \"Pierce Brosnan\"          \"Pierce Brosnan\"         \n## [23] \"Pierce Brosnan\"          \"Pierce Brosnan\"         \n## [25] \"1108.5610\"               \" 880.6692\"              \n## [27] \" 669.7895\"               \" 622.2464\"              \n## [29] \" 543.6396\"               \" 529.5487\"              \n## [31] \" 491.6172\"               \" 478.9464\"\n  bond[bond[\"year\"]>=1990,] # Includes all columns##                   filmname year          actor     gross\n## 1                  Skyfall 2012   Daniel Craig 1108.5610\n## 4                  Spectre 2015   Daniel Craig  880.6692\n## 8            Casino Royale 2006   Daniel Craig  669.7895\n## 11       Quantum of Solace 2008   Daniel Craig  622.2464\n## 13         Die Another Day 2002 Pierce Brosnan  543.6396\n## 14               Goldeneye 1995 Pierce Brosnan  529.5487\n## 16 The World is Not Enough 1999 Pierce Brosnan  491.6172\n## 18     Tomorrow Never Dies 1997 Pierce Brosnan  478.9464\n  bond[bond[\"year\"]>=1990,1:3] # Columns 1 through 3##                   filmname year          actor\n## 1                  Skyfall 2012   Daniel Craig\n## 4                  Spectre 2015   Daniel Craig\n## 8            Casino Royale 2006   Daniel Craig\n## 11       Quantum of Solace 2008   Daniel Craig\n## 13         Die Another Day 2002 Pierce Brosnan\n## 14               Goldeneye 1995 Pierce Brosnan\n## 16 The World is Not Enough 1999 Pierce Brosnan\n## 18     Tomorrow Never Dies 1997 Pierce Brosnan"},{"path":"baserfilter.html","id":"how-to-filter-a-list","chapter":"5 How to Filter and Transform Objects in Base R","heading":"5.6 How to Filter a List","text":"Unlike object types, won’t go detail transforming list. reason lists usually reserved output various functions. ’re handy way bunching objects together. wanted transform object within list, ’d probably transform object directly.Filtering list useful skill though.script creates model using James Bond data. creates list various calculations regression analysis. names() function shows objects contained within list:can select objects within list $, [\"object_name\"], [n] notations:Now ’s things get tricky. Let’s say want filter smaller value within objects list. changes depending object types. Confused?’s better go simpler example list generated lm() function., create list using objects made lesson:can select one objects list using $ notation:Now let’s say want select specific data point list. Let’s say want know Bond actors. know information stored within data frame within list. pull data, use combination filtering techniques ’ve covered chapter.First, pull data frame list. $ notation. , treat object type normal data frame.’s mean:object types :","code":"\n  bondmodel <- lm(gross ~ actor,data=bond)\n  names(bondmodel)##  [1] \"coefficients\"  \"residuals\"     \"effects\"       \"rank\"         \n##  [5] \"fitted.values\" \"assign\"        \"qr\"            \"df.residual\"  \n##  [9] \"contrasts\"     \"xlevels\"       \"call\"          \"terms\"        \n## [13] \"model\"\n  bondmodel$coefficients##         (Intercept) actorGeorge Lazenby actorPierce Brosnan    actorRoger Moore \n##           820.31651          -314.41673          -309.37854          -269.48336 \n##   actorSean Connery actorTimothy Dalton \n##           -95.43409          -487.19349\n  bondmodel[\"coefficients\"]## $coefficients\n##         (Intercept) actorGeorge Lazenby actorPierce Brosnan    actorRoger Moore \n##           820.31651          -314.41673          -309.37854          -269.48336 \n##   actorSean Connery actorTimothy Dalton \n##           -95.43409          -487.19349\n  bondmodel[1]## $coefficients\n##         (Intercept) actorGeorge Lazenby actorPierce Brosnan    actorRoger Moore \n##           820.31651          -314.41673          -309.37854          -269.48336 \n##   actorSean Connery actorTimothy Dalton \n##           -95.43409          -487.19349\n  v1 <- c(TRUE,FALSE,TRUE)\n  v2 <- c(\"Hola\",\"Howdy\",\"Hello\")\n  v3 <- c(1:3)\n  list1 <- list(vector1=v1,\n                vector2=v2,\n                vector3=v3,\n                matrix1=matrix1,\n                array1=array1,\n                bond=bond)\n  list1$vector1## [1]  TRUE FALSE  TRUE\n  list1$matrix1##      [,1] [,2]\n## [1,]    2    1\n## [2,]    0    3\n  list1$bond[3]##             actor\n## 1    Daniel Craig\n## 2    Sean Connery\n## 3    Sean Connery\n## 4    Daniel Craig\n## 5     Roger Moore\n## 6    Sean Connery\n## 7     Roger Moore\n## 8    Daniel Craig\n## 9     Roger Moore\n## 10   Sean Connery\n## 11   Daniel Craig\n## 12   Sean Connery\n## 13 Pierce Brosnan\n## 14 Pierce Brosnan\n## 15 George Lazenby\n## 16 Pierce Brosnan\n## 17    Roger Moore\n## 18 Pierce Brosnan\n## 19    Roger Moore\n## 20   Sean Connery\n## 21    Roger Moore\n## 22 Timothy Dalton\n## 23    Roger Moore\n## 24 Timothy Dalton\n  list1$bond$actor##  [1] \"Daniel Craig\"   \"Sean Connery\"   \"Sean Connery\"   \"Daniel Craig\"  \n##  [5] \"Roger Moore\"    \"Sean Connery\"   \"Roger Moore\"    \"Daniel Craig\"  \n##  [9] \"Roger Moore\"    \"Sean Connery\"   \"Daniel Craig\"   \"Sean Connery\"  \n## [13] \"Pierce Brosnan\" \"Pierce Brosnan\" \"George Lazenby\" \"Pierce Brosnan\"\n## [17] \"Roger Moore\"    \"Pierce Brosnan\" \"Roger Moore\"    \"Sean Connery\"  \n## [21] \"Roger Moore\"    \"Timothy Dalton\" \"Roger Moore\"    \"Timothy Dalton\"\n  list1$bond[\"actor\"]##             actor\n## 1    Daniel Craig\n## 2    Sean Connery\n## 3    Sean Connery\n## 4    Daniel Craig\n## 5     Roger Moore\n## 6    Sean Connery\n## 7     Roger Moore\n## 8    Daniel Craig\n## 9     Roger Moore\n## 10   Sean Connery\n## 11   Daniel Craig\n## 12   Sean Connery\n## 13 Pierce Brosnan\n## 14 Pierce Brosnan\n## 15 George Lazenby\n## 16 Pierce Brosnan\n## 17    Roger Moore\n## 18 Pierce Brosnan\n## 19    Roger Moore\n## 20   Sean Connery\n## 21    Roger Moore\n## 22 Timothy Dalton\n## 23    Roger Moore\n## 24 Timothy Dalton\n  list1$vector1[3]## [1] TRUE\n  list1$vector3[v3>=2]## [1] 2 3\n  list1$array1[,2,]##      [,1] [,2]      [,3]\n## [1,]    2    2 0.6666667\n## [2,]    2    2 0.6666667\n## [3,]    2    2 0.6666667\n## [4,]    2    2 0.6666667"},{"path":"baserfilter.html","id":"things-to-remember-3","chapter":"5 How to Filter and Transform Objects in Base R","heading":"5.7 Things to Remember","text":"filter transform data depends upon object type","code":""},{"path":"baserfilter.html","id":"exercises-1","chapter":"5 How to Filter and Transform Objects in Base R","heading":"5.8 Exercises","text":"Try see can complete following exercises. Answers back book!Filter following vector values greater 2. Display actual number (TRUE / FALSE).Filter following vector values 20 30, first three entries meet criteria. (Hint: add [n:n] range values determine values meet criteria)Multiply following matrices together.Subtract 41 every entry second column following matrix. Replace column new values.Select second row matrix following array. Subtract 5 rows.Filter James Bond data frame films starring Roger Moore.Filter James Bond data frame films starring Sean Connery made 1966.","code":"\n  q1 <- seq(1,20,2)\n  q2 <- round(rnorm(20,32,7),0)\n  q3_1 <- matrix(round(seq(1,40,3.27),0),3)\n  q3_2 <- matrix(seq(1,8,1),4)\n  q4 <- matrix(seq(1,120,4),10,3)\n  q5 <- array(data=c(matrix(seq(1,15,1),5,3),\n                    matrix(seq(4,60,4),5,3),\n                    matrix(seq(2,30,2),5,3)),\n              dim=c(5,3,3))\n  bond\n  bond"},{"path":"dplyr.html","id":"dplyr","chapter":"6 How to Filter and Transform Data with the dplyr Package","heading":"6 How to Filter and Transform Data with the dplyr Package","text":"last chapter, showed use R base filter transform objects. need learn use base R work object types R.However, ’s another popular package data filtering transformation – dplyr package.dplyr package (pronounced like “data plier”) developed allow intuitive data transformation. falls tidyverse, collection popular R packages.big difference method last chapter focus. Rather filtering transforming object type, ’ll focus exclusively data frames.","code":""},{"path":"dplyr.html","id":"why-is-dplyr-so-popular","chapter":"6 How to Filter and Transform Data with the dplyr Package","heading":"6.1 Why is dplyr So Popular?","text":"dplyr popular intuitive syntax filtering transforming data frames. programming background SQL, ’ll find easier method use.dplyr also highly readable compared base R. ’s see value . can send another programmer ’ll easier read ’re data.","code":""},{"path":"dplyr.html","id":"is-it-still-worth-learning-base-r","chapter":"6 How to Filter and Transform Data with the dplyr Package","heading":"6.2 Is It Still Worth Learning Base R?","text":"dplyr’s strengths mostly limited data frames, whereas base R can work vectors, matrices, arrays, lists. makes still worthwhile study base R.isn’t knock dplyr. Much work ’ll requires data frame R functions work data frames fairly easily. found functions typically write (’ll cover later) work lot better understand base R.","code":""},{"path":"dplyr.html","id":"how-to-install-and-load-dplyr","chapter":"6 How to Filter and Transform Data with the dplyr Package","heading":"6.3 How to Install and Load dplyr","text":"next chapter, ’ll go detail installing loading packages. now though, simply run script can follow along examples.can also run install.packages(\"tidyverse\"), install packages related data management, including dplyr.","code":"\n  install.packages(\"dplyr\")\n  load(dplyr)"},{"path":"dplyr.html","id":"the-dplyr-syntax","chapter":"6 How to Filter and Transform Data with the dplyr Package","heading":"6.4 The dplyr Syntax","text":"recall, filtering data frame base R looks like :’s different dplyr, looks like :can think dplyr syntax set instructions read one--one:Hey data set named “Bond”… bond %>%Tell film name, year released, actor name … select(filmname,year,actor) %>%James Bond films made 1990 filter(year>=1990)’s lot easier understand normal base R, ain’t ?","code":"\n  #If needed, you can reload the Bond data set with this script\n  bond <- read.csv(\"https://raw.githubusercontent.com/taylorrodgers/bond/main/bond.csv\")\n  \n  bond[bond[\"year\"]>=1990,1:3]\n  bond %>% \n    select(filmname,year,actor) %>% \n    filter(year>=1990)"},{"path":"dplyr.html","id":"understand-the-difference-between-selecting-and-filtering","chapter":"6 How to Filter and Transform Data with the dplyr Package","heading":"6.5 Understand the Difference Between Selecting and Filtering","text":"dplyr, ’s important remember difference selecting filtering.Selecting uses select() function reduces columns specify:addition select(), ’s also mutate() transmute(), serve similar purposes. ’ll cover two functions next section.Filtering uses filter() function reduces rows specify.","code":""},{"path":"dplyr.html","id":"how-to-select-and-mutate-a-data-frame-with-dplyr-in-r","chapter":"6 How to Filter and Transform Data with the dplyr Package","heading":"6.6 How to Select and Mutate a Data Frame with dplyr in R","text":"dplyr, can select columns using select() function:Executing code select columns actor, filmname, gross.Sometimes ’ll need transform alter data. ’s mutate() comes handy. mutate() allow create new fields alter existing ones. Confused?Execute script see:mutate() function added new column end called gross_millions new calculation.One thing keep mind mutate() always includes existing columns. can good bad, depending goal.Let’s say want create new column, include existing ones output. Rather add another %>% select() code, can use transmute() function.transmute() combines functionality mutate() select(). can define columns want keep mutate others.personally like transmute() selecting columns. However, select() mutate() appropriate many situations well.","code":"\n  bond %>% \n    select(actor,filmname,gross)\n  bond %>% \n    mutate(gross_millions=gross*1000000)\n  bond %>% \n    transmute(actor,filmname,gross=gross*1000000)"},{"path":"dplyr.html","id":"how-to-filter-a-data-frame-with-dplyr-in-r","chapter":"6 How to Filter and Transform Data with the dplyr Package","heading":"6.7 How to Filter a Data Frame with dplyr in R","text":"filter rows data frame, use filter() function:noticed, used operators base R. can use R operators shown :Table 6.1: R OperatorsYou can apply operators within filter() function:Like base R, can also pass vectors dynamic filters:","code":"\n  bond %>% \n    filter(year>=1980 & actor==\"Daniel Craig\")\n  bond %>% \n    filter(actor == \"Daniel Craig\" | actor == \"Sean Connery\")\n  bond %>%\n    filter(gross >= 700 & year < 2000)\n  actor_list <- c(\"Daniel Craig\",\"Sean Connery\",\"Timothy Dalton\")\n  bond %>% \n    filter(actor %in% actor_list)"},{"path":"dplyr.html","id":"how-to-summarize-and-group-data-with-dplyr-in-r","chapter":"6 How to Filter and Transform Data with the dplyr Package","heading":"6.8 How to Summarize and Group Data with dplyr in R","text":"Probably useful thing dplyr ability create new data frames group summarize data found larger data set. primary reason like dplyr.Let’s say wanted take Bond data set find mean standard deviation gross revenue, films starring Daniel Craig Sean Connery.accomplish base R, ’d use following code:’s simple, ? Imagine much larger data set even actors!dplyr’s group_by() summarize() functions really cut work. ’s can accomplish thing :Now ’ll notice script isn’t shorter earlier. However, ’s lot easier read. ’s beauty dplyr!","code":"\n  data.frame(actor_subselect=c(\"Daniel Craig\",\"Sean Connery\"), \n             average_revenue=c(mean(bond[bond$actor==\"Daniel Craig\",\"gross\"]),\n                               mean(bond[bond$actor==\"Sean Connery\",\"gross\"])),\n             sdev_revenue=c(sd(bond[bond$actor==\"Daniel Craig\",\"gross\"]),\n                            sd(bond[bond$actor==\"Sean Connery\",\"gross\"])))\n  bond %>% \n    filter(actor==\"Daniel Craig\" | actor == \"Sean Connery\") %>% \n    group_by(actor) %>% \n    summarize(average_revenue=mean(gross),sdev_revenue=sd(gross))"},{"path":"dplyr.html","id":"things-to-remember-4","chapter":"6 How to Filter and Transform Data with the dplyr Package","heading":"6.9 Things to Remember","text":"dplyr package provides intuitive syntax transforming analyzing data frames RSelect create new columns select(), mutate(), transmute()Filter rows filter() base R operatorsProvide summary statistics group_by() summarize() functions","code":""},{"path":"dplyr.html","id":"exercises-2","chapter":"6 How to Filter and Transform Data with the dplyr Package","heading":"6.10 Exercises","text":"Using mtcars data set dplyr package, filter cars gear value 4 hp greater 115. (Hint: use data(mtcars) load data set.)Using mtcars data set dplyr package, apply filter first question select columns mpg, cyl, gear, hp. (Note: output include car models row names default. need remove .)Using mtcars data set dplyr package, create new column takes natural log (log()) mpg name mpg_log. sure still select columns mentioned second question except mpg.Using mtcars data set dplyr package, determine average mpg, grouped gear, filtered wt greater 2.","code":""},{"path":"packages.html","id":"packages","chapter":"7 Understanding and Using R Packages","heading":"7 Understanding and Using R Packages","text":"Packages one important concepts R programming. ’s almost hard conceive R programming without .R package stores various functions data sets users access. allows R move beyond roots statistical programming achieve complex goals.example, might writing research paper. want clearly show results regression analysis report, along various tables charts. can use combination rmarkdown, ggplot2, xtable, various packages accomplish goal.way don’t copy paste work word document analyze results. merely write program R export ’re done. saves lot time long run makes code far re-producible.","code":""},{"path":"packages.html","id":"why-does-r-use-packages","chapter":"7 Understanding and Using R Packages","heading":"7.1 Why Does R Use Packages?","text":"Packages allow R operate open source language. Programmers, statisticians, data scientists can develop new functions commands share users elsewhere - free! common open source programming languages.want, can actually develop ’re package. find existing resources don’t perform operate way ’d like, can develop functions save package others use.","code":""},{"path":"packages.html","id":"how-to-access-r-packages","chapter":"7 Understanding and Using R Packages","heading":"7.2 How to Access R Packages","text":"show use R package, need understand ’s difference installing loading package. Installing means pulling CRAN saving computer. Loading package means using current R session.R ?Mostly efficiency. take memory R session ran every package installed computer. improves computer’s performance load packages need .Also, ’s uncommon R packages different developers functions name, different purposes inputs. Forcing load packages functions need solves issue.","code":""},{"path":"packages.html","id":"how-to-install-and-load-a-package---the-easy-way","chapter":"7 Understanding and Using R Packages","heading":"7.3 How to Install and Load a Package - The Easy Way","text":"couple different ways install load packages. depends whether need save re-use code later ’re running quick analysis.easiest way manage R packages RStudio’s user interface. better quick analysis don’t need save.RStudio packages tab bottom right pane neatly organizes details current packages:can use tab install download package.install package, select install button:, type name package. example , type “dplyr” install dplyr package.now see package show packages tab bottom right pane RStudio:doesn’t make dplyr package available us use though. still load .RStudio makes things easy. click little check box next dplyr load .now package loaded!","code":""},{"path":"packages.html","id":"how-to-install-and-load-r-packages---the-old-fashioned-way","chapter":"7 Understanding and Using R Packages","heading":"7.4 How to Install and Load R Packages - The Old Fashioned Way","text":"Sometimes ’s better hand-type code also applies package management. ’s call “old fashioned way.” may choose approach find faster scrolling user-interface. might writing script used later .two key functions need remember install load package way:install.packages()library()install.packages() installs package CRAN onto computer. library() load current R session.Oddly enough, ’s difference notation two. install.packages() function requires put quotations “” around package name. library() .see mean, look example :Notice quotations marks used first function? required install.packages(). library() function require , can use quotation marks ’ll still execute.","code":"\n  install.packages(\"dplyr\")\n  library(dplyr)"},{"path":"packages.html","id":"make-it-easy-for-the-next-person-to-use-the-required-packages","chapter":"7 Understanding and Using R Packages","heading":"7.5 Make It Easy for the Next Person to Use the Required Packages","text":"share R script colleague, may packages needed local computer execute .take care , can include install.packages() library() functions top script send .’re person open script future, need include library() function. Since ’ve already installed package , ’s need .","code":""},{"path":"packages.html","id":"how-to-find-new-packages-to-install","chapter":"7 Understanding and Using R Packages","heading":"7.6 How to Find New Packages to Install","text":"One --best kept secrets programmers rely google majority . Every time something doesn’t work, just google answer!Chances high ’ll program R. Whenever come across website documents function, ’ll either specify package start article post top right left corner screen.example, recently google’d “survival analysis R.” Unlike regression analysis, R doesn’t handy base functions perform survival analysis. found couple websites information R. required package called survival, displayed top left right website.","code":""},{"path":"packages.html","id":"how-to-find-documentation-on-packages","chapter":"7 Understanding and Using R Packages","heading":"7.7 How to Find Documentation on Packages","text":"packages install documentation . Sadly, much documentation easy read, ’s still great resource rely heavily.access documentation, can click hyperlinked package name Packages tab.example, try clicking dplyr’s link RStudio screen see mean:take Help tab can see documentation commands, functions, data sets given package.can select hyperlinks view instructions use specific function package., select mutate hyperlink:take documentation page…may noticed, documentation also lists function’s package top left hand corner. useful look functions later.can also use certain commands pull documentation. following bring package’s documentation Help tab.can look individual functions package.","code":"\n  ?dplyr()\n  ?mutate()"},{"path":"packages.html","id":"things-to-remember-5","chapter":"7 Understanding and Using R Packages","heading":"7.8 Things to Remember","text":"Packages allows adapt R programming meet needsYou can install load packages using Packages tab RStudio install.packages() library() commandsWhenever research new functions internet, often see package required top left right hand cornerYou can research packages using Help tab RStudio","code":""},{"path":"packages.html","id":"exercises-3","chapter":"7 Understanding and Using R Packages","heading":"7.9 Exercises","text":"Install tidyverse set packages. (Note: need install “tidyverse” ’ll load multiple packages.)Load dplyr package.","code":""},{"path":"function.html","id":"function","chapter":"8 How to Write Functions","heading":"8 How to Write Functions","text":"said chapters ago, R programming runs objects. object types relate way data stored ’s handled. ’s one object type, though, ’s unique compared others.function object type.R functions allow script various commands transform analyze data. can simple taking data vector outputting data frame. something complicated machine learning algorithm!depends R programming goals.","code":""},{"path":"function.html","id":"two-approaches-to-using-r-functions","chapter":"8 How to Write Functions","heading":"8.1 Two Approaches to Using R Functions","text":"’s two approaches can take functions:use existing functionwrite functionBoth methods use underlying structure.common functions ’ll use include R base stats packages. automatically come R. functions perform common calculations needed statistical programming, mean(), sum(), sd(), lm(), glm() confint().functions include developed R programmers, can access installing loading packages. (See chapter R packages details.)","code":""},{"path":"function.html","id":"why-you-should-learn-to-write-your-own-functions","chapter":"8 How to Write Functions","heading":"8.2 Why You Should Learn to Write Your Own Functions","text":"R flexible enough though can write functions well. might sound like trouble ’s worth, ’s really . takes lot time learn people’s functions. , verify functions perform accurately. ’s especially true packages developed lesser known organizations.Another problem documentation. Much documentation lesser known packages functions poorly written. ’s easy misunderstand inputs use correctly. experience often. ’ve saved lot development time simply writing functions.One last benefit relates data management. Custom functions handy dealing large, unstructured data sets. can write specific instructions can run loop ’ve cycled various data points. actually really big deal. lines code, can accomplish people need paid tool like Alteryx .","code":""},{"path":"function.html","id":"the-components-of-an-r-function","chapter":"8 How to Write Functions","heading":"8.3 The Components of an R Function","text":"Regardless whether use existing function write , require components execute: argument value.technical terms , might easier think argument input value output.Fortunately, R documentation tells required arguments existing functions. Simply add question mark ? function documentation appear Help tab bottom right pane RStudio.Try functions:example mean function, see requires least x value. Arguments section documentation states x merely R object.Value section provide details output function.","code":"\n  ?mean\n  ?sd\n  ?cor\n  ?confint"},{"path":"function.html","id":"required-versus-non-required-arguments","chapter":"8 How to Write Functions","heading":"8.4 Required versus Non-Required Arguments","text":"may noticed documentation mean() function two arguments: trim na.rm.can still execute mean() function without arguments. reason ’s default setting already place .Whoever created function set default trim 0 na.rm argument FALSE. way user modify arguments want .","code":""},{"path":"function.html","id":"when-order-matters-for-arguments","chapter":"8 How to Write Functions","heading":"8.5 When Order Matters for Arguments","text":"execute ?lm console, ’ll see linear model function argument options formula, data, subset, weights, etc. means execute model using Bond data lm(gross~actor,bond). Even though don’t specify arguments, R execute function formula argument (gross~actor) data argument (bond) placed correct order.can see order documentation:tried backwards, wouldn’t work. Executing lm(bond,gross~actor) console throw error. However, specify arguments equal = sign, execute. look like : lm(data=bond,formula=gross~actor).","code":""},{"path":"function.html","id":"how-to-write-your-own-functions","chapter":"8 How to Write Functions","heading":"8.6 How to Write Your Own Functions","text":"may noticed, existing R functions require least one argument (option ) displays least one value output. write functions, ’ll need thing.According R’s base documentation, function defined assignment, :’re going follow convention create several functions, one becoming complex.end goal create function :takes data setgroups data based single categorical variablecalculates mean standard deviation continuous variableBut first, let’s start simpler version .examples, ’ll need James Bond data set. Go ahead re-load function :first function calculate standard deviation continuous variable.’ll need provide name function arguments pass . ’ll name function sd.simple.also know ’ll require data frame field calculate standard deviation. ’ll call data field, respectively.can see script template function new name arguments replaced .Now ’ll need calculate add expression. expression actual script takes arguments uses execute certain tasks.start expression part new function, use {} notations:Next, need function evaluate data frame ’s placed data argument select field ’s specified. , use methods used selecting data data frame. (Note: design functions, ’s important keep mind type objects entered function.)recall, can select field directly data frame like :can use structure function. , replace “bond” “gross” argument names inside function.Now probably realized actually replaced “gross” paste(field). paste() function useful one remember. comes handy writing functions. allows dynamically inject argument throughout function’s expression.Next, need write script calculate standard deviation. ’ll use sample standard deviation equation, :\\[\n \\sqrt{\\frac{\\sum{(X_i-\\bar{X})^2}}{n-1}}\n\\]’ll plug function:walla! created first function! run function, simply add two arguments (data set variable).notice, put quotation marks around field argument “gross”. ’s argument used filtering data frame, requires quotation marks filter column column name (.e. data.frame[,\"column name\"]). using column number, wouldn’t need use quotation mark (.e. data.frame[,n]).can check work existing sd() function already built R make sure correctly.Looks like got right!","code":"  name <- function(arg_1, arg_2, …) expression\n  bond <- read.csv(\"https://raw.githubusercontent.com/taylorrodgers/bond/main/bond.csv\")  # Template  \n  name <- function(arg_1, arg_2, …) expression \n  # New function\n  sd.simple <- function(data, field) expression \n  sd.simple <- function(data, field) {\n  }\n  bond[,\"gross\"]\n  sd.simple <- function(data,field) {\n    field <- data[,paste(field)]\n  }\n  sd.simple <- function(data,field) {\n    field <- data[,paste(field)]\n    sqrt(sum((field - mean(field))^2) / (length(field) - 1))\n  }\n  sd.simple(bond,\"gross\")## [1] 214.4881\n  sd.simple(bond,\"gross\") == sd(bond[,\"gross\"])## [1] TRUE"},{"path":"function.html","id":"writing-functions-using-control-flows","chapter":"8 How to Write Functions","heading":"8.7 Writing Functions Using Control Flows","text":"usually won’t need write functions calculating things like standard deviation. plenty existing functions routine calculations like .Instead, people find custom functions useful things like data management. can use run large data sets produce smaller outputs summary statistics.’s control flow comes handy. people call “loops,” think easier term remember. control flow simply repeats calculation certain subgroups. Even though ’s easy conceive concept, ’s challenge implement. takes combination planning trial--error.different types control flows, can read executing ?Control console.one ’ll use (var seq) expr version. use one often ’ll probably serve early needs R programming.’s hard visualize expression works though. ’ll run example. create loop prints individual word statement vector reach end.First, create vector. said print every entry vector reach end. Even though simple example, can see useful complex data management tasks.","code":"\n  statement <- c(\"This\",\"book\",\"is\",\"the\",\"greatest\",\n                 \"book\",\"ever\",\"and\",\"I\",\"will\",\n                 \"recommend\",\"it\",\"to\",\"everyone\")\n  for (i in 1:length(statement)) {\n    print(statement[i])\n  }## [1] \"This\"\n## [1] \"book\"\n## [1] \"is\"\n## [1] \"the\"\n## [1] \"greatest\"\n## [1] \"book\"\n## [1] \"ever\"\n## [1] \"and\"\n## [1] \"I\"\n## [1] \"will\"\n## [1] \"recommend\"\n## [1] \"it\"\n## [1] \"to\"\n## [1] \"everyone\""},{"path":"function.html","id":"applying-a-control-flow-to-our-summary-stats-function","chapter":"8 How to Write Functions","heading":"8.8 Applying a Control Flow to Our Summary Stats Function","text":"Now ’re going build upon previous function control flow use report standard deviation average subgroup within larger data frame. ’ll demonstrate using Bond data frame. ’ll report summary statistics Bond actor’s net gross., replaced previous standard deviation script built-sd() function. simpler script make easier see control flow works. also added built-mean() function renamed overall function “summary.group”.Next, ’m going replace field assignment groups output.groups object creates short vector specifies groups want evaluate. Since ’ll evaluate actors Bond data frame, Daniel Craig, Sean Connery, etc. works similar previous field object assignment .output object empty data frame populate summary statistics, mean standard deviation, control flow evaluates subgroup. want create empty data frame control flow, otherwise control flow continuously overwrite .Now ’ll begin control flow. add control flow evaluates individual group found beginning function. Notice use length(groups) input () function. dynamic way ensuring control flow runs number grouping entries.Now ’ll want update output data frame group name, mean, standard deviation:Now let explain added . subdata object filters data group want evaluate. output[,1:3] object updates output data frame row group name, well mean standard deviation.Now function run, ’s still one piece ’re missing. need provide value.function, value want output object, data frame containing summary statistics. can merely add output reference end, outside control flow:run function Bond data frame, ’ll get result:","code":"\n  summary.group <- function(data,field) {\n    field <- data[,paste(field)]\n    sd(field)\n    mean(field)\n  }\n  summary.group <- function(data, group, field) {\n    groups <- levels(factor(data[,paste(group)]))\n    output <- data.frame(group=character(),\n                         mean=numeric(),\n                         sd=numeric())\n    sd(field)\n    mean(field)\n  }\n  summary.group <- function(data,group,field) {\n    groups <- levels(factor(data[,paste(group)]))\n    output <- data.frame(group=character(),\n                         mean=numeric(),\n                         sd=numeric())\n    for(i in 1:length(groups)) {\n      #sd(field) - can't run properly yet\n      #mean(field) - can't run properly yet\n      }\n    }\n  summary.group <- function(data,group,field) {\n    groups <- levels(factor(data[,paste(group)]))\n    output <- data.frame(group=character(),\n                         mean=numeric(),\n                         sd=numeric())\n    for(i in 1:length(groups)) {\n      subdata <- data[data[,paste(group)]==groups[i],\n                      paste(field)]\n      output[i,1:3] <- data.frame(groups[i],\n                                  mean(subdata),\n                                  sd(subdata))\n      }\n    }\n  summary.group <- function(data,group,field) {\n    groups <- levels(factor(data[,paste(group)]))\n    output <- data.frame(group=character(),\n                         mean=numeric(),\n                         sd=numeric())\n    for(i in 1:length(groups)) {\n      subdata <- data[data[,paste(group)]==groups[i],\n                      paste(field)]\n      output[i,1:3] <- data.frame(groups[i],\n                                  mean(subdata),\n                                  sd(subdata))\n      }\n    output\n    }\n  summary.group(bond,\"actor\",\"gross\")"},{"path":"function.html","id":"breaking-down-the-function-we-just-made","chapter":"8 How to Write Functions","heading":"8.9 Breaking Down the Function We Just Made","text":"’re new control flows, probably confused .make easier, ’m going show step--step function took Bond data created output.First, function reviewed group defined created vector members group.instance, include Bond actors:Second, function created empty data frame later store actor names, mean, standard deviation:function started control flow, evaluate actor’s data fill data frame just created:Next, filtered Bond data set first actor:Really, function filtered Bond data set similar way code :function took subdata calculated summary statistics. populated empty data set one one……new row looking something like :finally, displayed complete data frame finished control flow!objects named within function saved R environment. save results, need assign executed function name, like object.can apply existing functions.","code":"\n  levels(factor(bond[,\"actor\"]))## [1] \"Daniel Craig\"   \"George Lazenby\" \"Pierce Brosnan\" \"Roger Moore\"   \n## [5] \"Sean Connery\"   \"Timothy Dalton\"\n  groups <- levels(factor(bond[,\"actor\"]))\n  bond[bond[,\"actor\"]==groups[1],\"gross\"]## [1] 1108.5610  880.6692  669.7895  622.2464##      groups.1. mean.subdata. sd.subdata.\n## 1 Daniel Craig      820.3165     222.574\n  bond_eval <- summary.group(bond,\"actor\",\"gross\")\n  bond_eval"},{"path":"function.html","id":"things-to-remember-6","chapter":"8 How to Write Functions","heading":"8.10 Things to Remember","text":"Functions object type modifies objectsFunctions require argument execute typically outputs valuePackages store previously built functions can utilizeYou can build functions suit R programming needsControl flows “loops” handy way automate data management tasks granular level","code":""},{"path":"function.html","id":"exercises-4","chapter":"8 How to Write Functions","heading":"8.11 Exercises","text":"Try see can complete following exercises. Answers back book!Modify simple standard deviation function wrote change calculate mean. without using built-mean function.Alter summary.group function include median, maximum, minimum values.Write function Fibonacci Sequence, ends number choose. ’ll need use control flow accomplish default value end sequence. (Hint: won’t use (var seq) expr control flow. Execute ?Control use different version.)","code":""},{"path":"importdata.html","id":"importdata","chapter":"9 Importing Data into R","heading":"9 Importing Data into R","text":"’s three good ways import data R:Import raw data file (.csv, .xlsx, .tsv, etc.)Connect database (SQL Server, AWS, etc.)Connect API (Google Analytics, Census Bureau, etc.)Students researchers use first option . ’s data sets usually smaller don’t require database. can write command use RStudio user interface import raw data files.second option ’ll use working large organization. data stored large database can access. work SQL database, ’re luck. can access database directly RStudio! Although require setup.third option involves connecting application programming interface (API). ’s fancy way saying connect online application. Typically, ’ll download existing packages make easier. ’s always true though. Sometimes ’ll stuck writing code access API may wonder ’s simply better download raw data files import.","code":""},{"path":"importdata.html","id":"how-to-import-a-raw-data-file-the-easy-way","chapter":"9 Importing Data into R","heading":"9.1 How to Import a Raw Data File the Easy Way","text":"RStudio makes routine steps like raw data import easy. top right pane, ’ll see Import Dataset button. Click .following example, ’ll select “Text (readr)…”. allows us import .csv, .txt, text files. Importing SAS data file isn’t different importing CSV file.Click “Text(readr)…” see screen:get started, first need provide file path URL top search bar. (Just use raw data file computer go Kaggle.com find one.)can select “Browse…” find specific file computer., ’ll see selected .tsv file. can see, data doesn’t look right.’s RStudio’s default setting raw data import assumes data comma-delimited. need change Delimator: option “Tab.”data look like now:hit Import bottom right-hand corner window, look RStudio produced box .can see, RStudio writes script ’ll use import data set. Selecting “import” run script afterwards.Go ahead hit import now. ’ll see data set appear data frame environment tab:Congrats! successfully imported raw data file. can follow similar steps Excel, SAS, STATA, data file types!","code":""},{"path":"importdata.html","id":"import-a-raw-data-file-the-hard-way","chapter":"9 Importing Data into R","heading":"9.2 Import a Raw Data File the Hard Way","text":"last section, actually provided clue import raw data “hard” way. remember, showed using RStudio’s built-Import Dataset option write script R use execute import data:hard way writing code . Personally, think ’s waste time. see people might show good R programming , don’t seek recognition. say just let RStudio UI .","code":""},{"path":"importdata.html","id":"save-import-functions","chapter":"9 Importing Data into R","heading":"9.3 Save Import Functions","text":"good idea, however, save scripts RStudio generates whenever need save document. example, may raw data set saved URL shared drive organization. may also need share R script saved file people. case, want go ahead save scripts import relevant data.’ll need include top document, future programmers can execute use data sets analysis.’s example ’ll :script , also made sure load readr haven package. required load file paths .","code":"\nlibrary(readr)\nsummer_train <- read_delim(\"Downloads/summer_train.tsv\", \"\\t\", escape_double = FALSE, trim_ws = TRUE)\nsummer_test <- read_delim(\"Downloads/summer_test.tsv\", \"\\t\", escape_double = FALSE, trim_ws = TRUE)\ncustomers_data <- read_csv(\"Downloads/Wholesale customers data.csv\")\n\nlibrary(haven)\nkidney <- read_sas(\"Downloads/kidney.sas7bdat\", NULL)"},{"path":"importdata.html","id":"connect-to-a-database","chapter":"9 Importing Data into R","heading":"9.4 Connect to a Database","text":"connect database tool, work RStudio admin. Ask key connection information, :DriverServer URL IP addressDatabase nameUser name password (different typical username password)PortTypically, inputs used signing organization’s database management software.’ll also need ensure ’s driver setup local computer network use. ask RStudio admin .created driver necessary credentials, can connect database Connections tab upper-right pane:can use dbReadTable() function DBI package import table database R data frame:intend share work, include connections top R script.","code":"\nlibrary(odbc)\ncon <- dbConnect(odbc(),\n                 Driver = \"SQLServer\",\n                 Server = \"sqlhostname\",\n                 Database = \"dbase\",\n                 UID = \"username\",\n                 PWD = rstudioapi::askForPassword(\"Database password:\"),\n                 Port = 1433)\ndataset <- dbReadTable(con,\"tablename\")"},{"path":"importdata.html","id":"connect-to-an-api","chapter":"9 Importing Data into R","heading":"9.5 Connect to an API","text":"Much like database, API connections tool specific. Actually, ’d say ’re tool specific database connections. ’ll need configure source tool R accomplish .Fortunately, R packages common API connections . search something like “R package tool-name API connection.” ’ll often find need.want get practice API connection, can read article connecting US Census Bureau’s API www.taylorrodgers.com.","code":""},{"path":"importdata.html","id":"things-to-remember-7","chapter":"9 Importing Data into R","heading":"9.6 Things to Remember","text":"Import raw data Import Dataset button Environment tab upper-right paneConnect databases Connections tab upper-right paneWork data engineering team setting necessary drivers credentials database connectionsAPI connections handy large, one time analysisDownload specific packages connect API","code":""},{"path":"plotdata.html","id":"plotdata","chapter":"10 How to Plot Data in R","heading":"10 How to Plot Data in R","text":"Within R, ’s three popular methods plotting data. first uses plot function R base. second uses ggplot2 package, RStudio developed tidyverse package set. third plot_ly, developed “Plotly” company.R base version plot functions much subdued uses simpler graphics. typically looks something like :ggplot2 outputs something like :plotly outputs something similar ggplot2, built-interactivity, tool tips:People build elaborate data visualizations using R typically prefer ggplot2 plotly. two packages robust aesthetics interactivity R base plot functions.","code":""},{"path":"plotdata.html","id":"which-r-plot-package-is-best","chapter":"10 How to Plot Data in R","heading":"10.1 Which R Plot Package is Best?","text":"question solid “depends!” highlights one R’s greatest strengths weaknesses. ’s open-source language, led multiple packages providing similar purposes, subtle differences functionality.’d say base plot package definitely “smarter” pacakge. , mean often makes educated guess plot data.example, can literally run plot() function linear regression models, single variables, data frames, function makes pretty good assumption plots want see. handy exploratory data analysis.say default aesthetics base package great. saw last section, ggplot2 plotly add bit flare. said, data viz tools good developer. know use color, font selection, right data viz effectively, can make base plots look good. just takes work, experience.example, took Bond data set made data viz base package. changed color, font, settings managed make look pretty good. can see code output :wasn’t easy though. research figure accomplish visualizaiton .think ggplot2 intuitive syntax. example, produce similar plot one much shorter script:probably noticed script lot shorter last one. similar syntax dplyr package. uses + operator add layers plot, similar dplyr uses %>% create series data transformations.best , ggplot2 plots look pretty good. didn’t take much work produce semi-professional looking graph.thing don’t like ggplot2 default aesthetics. looks better base, just looks “busy” . don’t like gray background plot don’t like lines. data viz professionals advise keeping plots somewhat minimalistic.order make plot less busy, write additional lines code:isn’t big deal add , tedious . Thankfully, pre-built themes ggthemes package can use. themes mimic aesthetics Wall Street Journal, Economist, FiveThirtyEight, several well-known data journalism outlets.’s FiveThirtyEight’s template :personally like pander theme . provides just enough detail help human eye without becoming busy.plotly data viz strikes good balance intuitive syntax great default visualizations. also provides great resources building interactive web-based applications. ’ve used extensively now building Shiny applications engineers use make predictions. fact can get real specific event tracking interactions makes best developers.’s example:plotly somewhat less intuitive syntax though. functions become hierarchy lists. look code output , ’ll notice specify formatting options lists:syntax isn’t hard learn, require practice.","code":"\nbond <- read.csv(\"https://raw.githubusercontent.com/taylorrodgers/bond/main/bond.csv\")\nbond$actor <- factor(bond$actor)\nbond_colors <- c(\"#7fb7be\",\"#d3f3ee\",\"#dacc3e\",\"#bc2c1a\",\"#7d1538\",\"#454444\")\nbond_colors <- bond_colors[as.numeric(bond$actor)]\nplot(bond$year,\n     bond$gross,\n     bg=bond_colors,\n     col=\"black\",\n     cex=2,\n     pch=21,\n     xlab=\"Year Released\",\n     ylab=\"Gross Revenue (in millions)\",\n     main=\"Gross Revenue for Bond Films\",\n     col.axis=\"#454444\",\n     col.main=\"#454444\",\n     col.lab=\"#454444\",\n   fg=\"#454444\",\n   family=\"Droid Sans\"\n     ) \nlegend(\"top\",inset=0.05,\n       legend=unique(bond$actor),\n       cex=.9,pch=21,pt.cex=1.2,\n       pt.bg=unique(bond_colors))\nlibrary(ggplot2)\nbond <- read.csv(\"https://raw.githubusercontent.com/taylorrodgers/bond/main/bond.csv\")\nbond$actor <- factor(bond$actor)\n\nggplot(data=bond,\n       mapping=aes(x=year,y=gross,color=actor)) +\n   geom_point(size=3) +\n   labs(x=\"Year\",\n        y=\"Gross Revenue (in millions)\",\n        title=\"Gross Revenue for Bond Films\") +\n   theme(plot.title = element_text(hjust = 0.5))\nggplot(data=bond,\n       mapping=aes(x=year,y=gross,color=actor)) +\n   geom_point(size=3) +\n   labs(x=\"Year\",\n        y=\"Gross Revenue (in millions)\",\n        title=\"Gross Revenue for Bond Films\") +\n   theme(plot.title = element_text(hjust = 0.5),\n         panel.grid.major = element_blank(),\n         panel.grid.minor = element_blank(),\n         panel.background = element_blank(),\n         axis.line = element_line(color=\"grey\"))\nlibrary(ggthemes)\nggplot(data=bond,\n       mapping=aes(x=year,y=gross,color=actor)) +\n   geom_point(size=3) +\n   labs(x=\"Year\",\n        y=\"Gross Revenue (in millions)\",\n        title=\"Gross Revenue for Bond Films\") +\n   theme_fivethirtyeight()\nlibrary(ggthemes)\nggplot(data=bond,\n       mapping=aes(x=year,y=gross,color=actor)) +\n   geom_point(size=3) +\n   labs(x=\"Year\",\n        y=\"Gross Revenue (in millions)\",\n        title=\"Gross Revenue for Bond Films\") +\n   theme_pander()\nlibrary(plotly)\nplot_ly(data=bond,x=~year,y=~gross,color=~actor,size=10)\nlibrary(plotly)\nplot_ly(data=bond,x=~year,y=~gross,color=~actor,size=10) %>%\n        layout(title=\"Gross Revenue for Bond Films\",\n               xaxis=list(title=\"Year\"),\n               yaxis=list(title=\"Gross Revenue (in millions)\"))"},{"path":"plotdata.html","id":"so-which-data-viz-package-is-actually-the-best","chapter":"10 How to Plot Data in R","heading":"10.2 So Which Data Viz Package is Actually the Best?","text":"Many data scientists say best method one already know. said, understand fundamentals good data visualization, can use tool pretty well. already know one methods (know another tool like Tableau PowerBI), say go one.said, suggest ggplot2 conduct research. focus ggplot2 exclusively remaining chapter.reason like ggplot2 best readable syntax ability use templates. ’s also one many R programmers know allows easily share work others.","code":""},{"path":"plotdata.html","id":"how-to-write-ggplot2-scripts","chapter":"10 How to Plot Data in R","heading":"10.3 How to Write ggplot2 Scripts","text":"write whole book describe ggplot2’s functions best practices. many suggest read want get really, really good . Since book researchers probably want plots illustrate research, ’ll focus basics show make visualizations look professional.easiest way think ggplot2’s syntax imagine clear, transparent celluloid sheets paper. one something drawn . bottom one defines x y axes:script , haven’t actually plotted anything yet. ’re defining structure plot. ’re specifying data Bond data set ’re “mapping” aesthetic parameters (mapping=aes()). Within mapping=aes(), state x-axis year, y-axis revenue, color actor.run script , ’ll see blank box:define values, can add new layer. layer provide data viz want. want scatterplot, ’ll use geom_point() function:’ll notice, didn’t need specify arguments geom_point() function . ’s functions inherit arguments functions .want , can change plot line plot swapping geom_point() function geom_line() function:isn’t good plot though. broke actors color Bond actor plays role across entire time span. reason, line broke apart. can turn single line removing actor aes() function :Now can see revenue Bond films changed years, lost ability see Bond actors. want see one line, also see individual actors perform?Simple! just layer two visualizations top !Pay close attention last script. used + operator defined two data visualizations: geom_line() geom_point(). defined color geom_point() function, rather ggplot() function. prevented geom_line() inheriting color argument breaking line .current visualization isn’t perfect though. ’d like make dots bigger can better tell actor. can adjust setting geom_point() function:Now want remember something - ’re layering visualizations. means consider order build .look script , geom_point() function geom_line() function. means line sit top points, less clear previous visualization.","code":"\nggplot(data=bond,mapping=aes(x=year,y=gross,color=actor))\nggplot(data=bond,mapping=aes(x=year,y=gross,color=actor)) +\n   geom_point()\nggplot(data=bond,mapping=aes(x=year,y=gross,color=actor)) +\n   geom_line()\nggplot(data=bond,mapping=aes(x=year,y=gross)) +\n   geom_line()\nggplot(data=bond,mapping=aes(x=year,y=gross)) +\n   geom_line() +\n   geom_point(aes(color=actor))\nggplot(data=bond,mapping=aes(x=year,y=gross)) +\n   geom_line() +\n   geom_point(aes(color=actor),size=3)\nggplot(data=bond,mapping=aes(x=year,y=gross)) +\n   geom_point(aes(color=actor),size=3) +\n   geom_line()"},{"path":"plotdata.html","id":"how-to-plot-common-data-visualizations-in-ggplot2","chapter":"10 How to Plot Data in R","heading":"10.4 How to Plot Common Data Visualizations in ggplot2","text":"Typically, common data visualizations ’ll need plot include:scatterbarlinebox--whiskersSome people add pie charts, well-documented reasons online pie charts (doughnut charts) ineffective data visualizations. won’t cover .","code":""},{"path":"plotdata.html","id":"how-to-plot-a-scatterplot","chapter":"10 How to Plot Data in R","heading":"10.4.1 How to Plot a Scatterplot","text":"one ’ve already covered previous sections. use functions ggplot2() geom_point() create scatterplot:","code":"\nggplot(data=bond,mapping=aes(x=year,y=gross,color=actor)) +\n   geom_point(size=3)"},{"path":"plotdata.html","id":"how-to-plot-a-bar-graph-histogram","chapter":"10 How to Plot Data in R","heading":"10.4.2 How to Plot a Bar Graph / Histogram","text":"three functions available plotting bar graphs:geom_bar()geom_col()geom_histogram()three functions overlap can use report figures.geom_bar() useful reporting count data category example, may want see many times actor portrayed Bond character. , ’ll need map x-axis actor specify stat argument “count”.can also use geom_bar() report continuous variable. example, might want see gross revenue actor. , ’ll need specify weight argument within aes() function .can also use geom_col() something similar. geom_col() better fit type visualization actually produces stacked bar graph. ’s also simpler code, need define aes() .geom_histogram() displays histogram, special kind bar chart used display distribution data.can see, need specify one variable number bins get working histogram.","code":"\nggplot(data=bond,mapping=aes(x=actor)) +\n   geom_bar(stat=\"count\")\nggplot(data=bond,mapping=aes(x=actor)) +\n   geom_bar(aes(weight=gross))\nggplot(data=bond,mapping=aes(x=actor,y=gross)) +\n   geom_col()\nggplot(data=mtcars,mapping=aes(hp)) +\n   geom_histogram(bins=12)"},{"path":"plotdata.html","id":"how-to-plot-a-line-graph","chapter":"10 How to Plot Data in R","heading":"10.4.3 How to Plot a Line Graph","text":"work time-series data something similar, geom_line() function works well connecting points. can also use overlay two y-axes one another, ’ll cover .’ve shown , create line plot:can also break lines groups. Let’s say example wanted see Bond revenue changed actor movies released. specifically, let’s say want see Daniel Craig’s second film compared Sean Connery Roger Moore. require data transformation, can see :can see plot Roger Moore started strong, revenue decreased time. Daniel Craig Sean Connery consistently outperformed rest though.","code":"\nggplot(data=bond,mapping=aes(x=year,y=gross)) +\n   geom_line()\nlibrary(dplyr)\nbond_alter <- bond %>%\n   arrange(actor,year) %>%\n   group_by(actor) %>%\n   mutate(order=row_number(actor))\n\nggplot(data=bond_alter,mapping=aes(x=order,y=gross,color=actor)) +\n   geom_line()"},{"path":"plotdata.html","id":"how-to-plot-a-box-and-whiskers-plot","chapter":"10 How to Plot Data in R","heading":"10.4.4 How to Plot a Box-and-Whiskers Plot","text":"create box--whiskers plot, use geom_plot() function:career, ’ve learned love box--whiskers plots. ’s best visualization helps stakeholders aren’t statistics savvy appreciate variation. assume ’s learn read plots college. Whenever try introduce standard deviation key performance indicator, usually don’t understand ’s important. box--whiskers plot, especially compare multiple plots, makes easier stakeholders understand matters.see previous visualization, ’s wide variety results Bond actors gross revenue. Pierce Brosnan generated consistent revenue. Roger Moore lower median Brosnan, several films better.","code":"\nggplot(data=bond,mapping=aes(x=actor,y=gross)) +\n   geom_boxplot()"},{"path":"plotdata.html","id":"how-to-improve-labels-and-other-formatting-tips","chapter":"10 How to Plot Data in R","heading":"10.4.5 How to Improve Labels and Other Formatting Tips","text":"’ve worked many data viz tools also mentored people now. One thing always like tell people good data visualizations focus “little details.” ’ve noticed, plots don’t best labeling coloring. Spending extra 10-15 minutes little details makes work look far professional help audience appreciate insights deliver.first thing improve labels. data sets don’t use proper English describe field names. data set, Actor (capitalized) spelled actor (lower case).larger data sets, might multiple fields descriptive names. Bond example, LeadActress, PrimaryAntagonistActor, SecondaryAntagonistActor, etc. give us flexibility analysis, names make poor labels plot.can use labs() function solve problem. look plot , can see give better labels plot:’s one x y-axis, well one title. can already tell, labeling far descriptive professional past labels.Let’s say want add color. recall, simply add color=actor aes() function. change legend title, simply add color=\"Actor Name\" labs() function:can also define color codes want use plots. Personally, ’d suggest just using templates described earlier section . functions perform tasks get bit confusing documentation isn’t great.said, suggest focus scale_manual() functions defining colors. Execute ?scale_manual console see documentation .’s seven manual functions data viz parameters:scale_color_manual()scale_fill_manual()scale_size_manual()scale_shape_manual()scale_linetype_manual()scale_alpha_manual()scale_discrete_manual()’ll notice, relates type plot ’ll use. Since used scatter plot thing changed color, ’ll use scale_color_manual() dictate specific colors:’m fan gray background grids used default ggplot2. can use theme() function remove :can tell, gets bit tedious remove default graphics. trade-ggplot2 mind. syntax intuitive, improving aesthetics isn’t something enjoy.reason, suggest using templated themes, ’s “Practical Rules Using Color Charts” theme theme_few() “pander” theme theme_pander():","code":"\nlibrary(ggthemes)\nggplot(data=bond,\n       mapping=aes(x=year,y=gross)) +\n   geom_point(size=3) +\n   labs(x=\"Year\",\n        y=\"Gross Revenue (in millions)\",\n        title=\"Gross Revenue for Bond Films\")\nggplot(data=bond,\n       mapping=aes(x=year,y=gross,color=actor)) +\n   geom_point(size=3) +\n   labs(x=\"Year\",\n        y=\"Gross Revenue (in millions)\",\n        title=\"Gross Revenue for Bond Films\",\n        color=\"Actor Name\")\nggplot(data=bond,\n       mapping=aes(x=year,y=gross,color=actor)) +\n   geom_point(size=3) +\n   labs(x=\"Year\",\n        y=\"Gross Revenue (in millions)\",\n        title=\"Gross Revenue for Bond Films\",\n        color=\"Bond Actor\") +\n   scale_color_manual(values=c(\"#d55e00\",\"#cc79a7\",\"#0072b2\",\"#f0e442\",\"#009e73\",\"#d45e49\"))\nggplot(data=bond,\n       mapping=aes(x=year,y=gross,color=actor)) +\n   geom_point(size=3) +\n   labs(x=\"Year\",\n        y=\"Gross Revenue (in millions)\",\n        title=\"Gross Revenue for Bond Films\",\n        color=\"Bond Actor\") +\n   scale_color_manual(values=c(\"#d55e00\",\"#cc79a7\",\"#0072b2\",\"#f0e442\",\"#009e73\",\"#d45e49\")) +\n   theme(panel.grid.major = element_blank(),\n         panel.grid.minor = element_blank(),\n         panel.background = element_blank(),\n         axis.line = element_line(color=\"black\"))\nlibrary(ggthemes)\nggplot(data=bond,\n       mapping=aes(x=year,y=gross,color=actor)) +\n   geom_point(size=3) +\n   labs(x=\"Year\",\n        y=\"Gross Revenue (in millions)\",\n        title=\"Gross Revenue for Bond Films\",\n        color=\"Bond Actor\") +\n   theme_pander()"},{"path":"plotdata.html","id":"things-to-remember-8","chapter":"10 How to Plot Data in R","heading":"10.5 Things to Remember","text":"popular data viz packages R base, ggplot2, plotlybase great data exploration makes good “guess” plot want seeplotly great interactive capabilities recommend app developmentggplot2 best researcher, statisticians, data analystsggplot2 intuitive syntaxggplot2 “layers” visualizationsI recommend using themes ggplot2","code":""},{"path":"plotdata.html","id":"exercises-5","chapter":"10 How to Plot Data in R","heading":"10.6 Exercises","text":"Using mtcars data set ggplot2 package, build scatter plot hp x-axis mpg y-axis. (Hint: don’t forget use library(ggplot2) data(mtcars) first.)Using plot made previous question, use color distinguish cyl point. sure turn cyl column factor first factor(cyl).Add descriptive labeling x-axis, y-axis, legend. example, use “Horsepower” instead “hp”.Make data viz title “Car Performance”.Use theme_pew() theme ggthemes package.","code":""},{"path":"statfunctions.html","id":"statfunctions","chapter":"11 Statistical Functions in R: Common Functions and How They Work","heading":"11 Statistical Functions in R: Common Functions and How They Work","text":"core, R programming statistical programming language. R programmer, ’s good chance want make predictions inferences data. ’s ’ll cover chapter!","code":""},{"path":"statfunctions.html","id":"how-statistical-functions-work-in-r-programming","chapter":"11 Statistical Functions in R: Common Functions and How They Work","heading":"11.1 How Statistical Functions Work in R Programming","text":"great thing statistical functions R often follow principles. ’ll find works one model type work others.Typically, programming steps follow workflow.’ll use model function, generate list object. makes easy apply functions model object evaluate performance make predictions new data.can use summary() function model object see basic model performance measures.’re interested prediction, rather testing hypothesis, can use predict() function apply model object new data. can also export model .rds file share colleagues similar purposes.addition, can also apply statistical R functions model, anova() confint(), well others, measure performance.’s okay ’s clear concepts work together. ’ll actually demonstrate next sections. keep mind even model-type want use isn’t covered section, methods usually apply time.Towards end chapter, ’ll provide simple examples walk common statistical functions models used research.","code":""},{"path":"statfunctions.html","id":"how-to-build-a-model-in-r-example-with-linear-regression","chapter":"11 Statistical Functions in R: Common Functions and How They Work","heading":"11.2 How to Build a Model in R (Example with Linear Regression)","text":"Every model build uses particular function . functions actually support multiple model types. get started, ’ll use lm() function build linear regression model.Let’s say want build model mtcars data set. want build model uses disp predict mpg. look data set , can see summary statistics two columns.order build model, ’ll need use lm() function. use function, need define formula data set:formula defined using ~ sign. basically implies regression model “mpg=disp”.Another important thing realize object ’s produced. look Environment pane, ’ll see new list object model.lm() function produces list includes many summary statistics useful items come handy later. statistical functions R well.","code":"\ndata(mtcars)\nsummary(mtcars[c(\"mpg\",\"disp\")])##       mpg             disp      \n##  Min.   :10.40   Min.   : 71.1  \n##  1st Qu.:15.43   1st Qu.:120.8  \n##  Median :19.20   Median :196.3  \n##  Mean   :20.09   Mean   :230.7  \n##  3rd Qu.:22.80   3rd Qu.:326.0  \n##  Max.   :33.90   Max.   :472.0\nmod1 <- lm(mpg~disp,data=mtcars)"},{"path":"statfunctions.html","id":"how-to-review-common-model-performance-statistics","chapter":"11 Statistical Functions in R: Common Functions and How They Work","heading":"11.3 How to Review Common Model Performance Statistics","text":"Building model isn’t hard, can tell. Typically though, real work lays model evaluation. summary statistics can found using summary() function:can say, summary() function tells lot good model . can see adjusted R-square, F-Statistic, individual p-values parameter.might ask just call mod1. can , doesn’t give nearly detailThe reason clear moment. “mod1” actual model. can re-use object make predictions new data. output lm() function resembled saw using summary() function, make challenging use new data.Sometimes, may want evaluate one model another. Whenever happens, ’s useful create another object summary output model. allow select individual pieces output saw .example, can create new list model 1’s summary. can use $ notation call individual performance indicators model, adj.r.squared fstatistic.","code":"\nsummary(mod1)## \n## Call:\n## lm(formula = mpg ~ disp, data = mtcars)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -4.8922 -2.2022 -0.9631  1.6272  7.2305 \n## \n## Coefficients:\n##              Estimate Std. Error t value Pr(>|t|)    \n## (Intercept) 29.599855   1.229720  24.070  < 2e-16 ***\n## disp        -0.041215   0.004712  -8.747 9.38e-10 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 3.251 on 30 degrees of freedom\n## Multiple R-squared:  0.7183, Adjusted R-squared:  0.709 \n## F-statistic: 76.51 on 1 and 30 DF,  p-value: 9.38e-10\nmod1## \n## Call:\n## lm(formula = mpg ~ disp, data = mtcars)\n## \n## Coefficients:\n## (Intercept)         disp  \n##    29.59985     -0.04122\nmod1_summary <- summary(mod1)\nmod1_summary$adj.r.squared\nmod1_summary$fstatistic"},{"path":"statfunctions.html","id":"how-to-make-predictions-with-a-model","chapter":"11 Statistical Functions in R: Common Functions and How They Work","heading":"11.4 How to Make Predictions with a Model","text":"Many researchers interested “inferential” side statistics. plain English, ’re hoping prove disprove relationship one variable another. Others time, may want use model predict future events outcomes. common data scientists like .can use predict() function make predictions new data. Actually, can use function without new data simply plugging model object name . show model predicts using original data set (often useful model performance indicator ).Let’s say new set disp values want see predicts mpg. simply specify model name want use new data set name, like :can imagine, predict() function comes handy lot. ’s common feature model objects produced R packages. ’ve used neural nets advanced predictive algorithms. comes .","code":"\npredict(mod1)##           Mazda RX4       Mazda RX4 Wag          Datsun 710      Hornet 4 Drive \n##            23.00544            23.00544            25.14862            18.96635 \n##   Hornet Sportabout             Valiant          Duster 360           Merc 240D \n##            14.76241            20.32645            14.76241            23.55360 \n##            Merc 230            Merc 280           Merc 280C          Merc 450SE \n##            23.79677            22.69220            22.69220            18.23272 \n##          Merc 450SL         Merc 450SLC  Cadillac Fleetwood Lincoln Continental \n##            18.23272            18.23272            10.14632            10.64090 \n##   Chrysler Imperial            Fiat 128         Honda Civic      Toyota Corolla \n##            11.46520            26.35622            26.47987            26.66946 \n##       Toyota Corona    Dodge Challenger         AMC Javelin          Camaro Z28 \n##            24.64992            16.49345            17.07046            15.17456 \n##    Pontiac Firebird           Fiat X1-9       Porsche 914-2        Lotus Europa \n##            13.11381            26.34386            24.64168            25.68030 \n##      Ford Pantera L        Ferrari Dino       Maserati Bora          Volvo 142E \n##            15.13335            23.62366            17.19410            24.61283\ndisp_new <- data.frame(disp=c(rnorm(15,240,30))) #this simply generates random numbers\npredict(mod1,disp_new)##        1        2        3        4        5        6        7        8 \n## 21.92072 19.57914 19.62402 18.37712 20.86951 18.68507 20.79849 19.15828 \n##        9       10       11       12       13       14       15 \n## 17.89549 20.64230 20.99769 17.17329 21.15449 18.20183 19.61650"},{"path":"statfunctions.html","id":"how-to-save-your-model-to-use-later","chapter":"11 Statistical Functions in R: Common Functions and How They Work","heading":"11.5 How to Save Your Model to Use Later","text":"Quite often, ’ll need save model re-use situations ’s .rds file type comes handy. .rds files allow save objects environment reload later.’ll need load readr package create file types. , ’ll use write_rds() create .rds file read_rds() later load elsewhere. (may need install package using install.packages().)running previous script, ’ll see .rds file appear current working directory (usually project directory user login’s default directory). can specify file path script two quotations marks.want re-use model, can simply reload .rds file using read_rds() function. sure assign object name make work.’s cool part .rds file - don’t need reload original data set make new model work! feed new data, ’ll make new predictions. comes handy whenever build Shiny apps want productionalize model.","code":"\nlibrary(readr)\nwrite_rds(mod1,\"mod1.rds\")\nmodel_reload <- read_rds(\"mod1.rds\")\ndisp_new <- data.frame(disp=c(rnorm(15,240,30)))\npredict(model_reload,disp_new)##        1        2        3        4        5        6        7        8 \n## 20.82545 21.27865 20.16891 19.18273 18.64478 19.26571 19.85724 21.91752 \n##        9       10       11       12       13       14       15 \n## 17.48599 19.03953 20.60156 20.60352 18.19875 20.04392 20.77241"},{"path":"statfunctions.html","id":"how-to-add-multiple-parameters-to-a-model","chapter":"11 Statistical Functions in R: Common Functions and How They Work","heading":"11.6 How to Add Multiple Parameters to a Model","text":"can add additional parameters model adding formula lm() function. Let’s say want add drat wt variables regression model. specify variables + sign .can see , variables aren’t necessarily best addition combination. since ’s example, won’t worry much .","code":"\nmod2 <- lm(mpg~disp+drat+wt,mtcars)\nsummary(mod2)## \n## Call:\n## lm(formula = mpg ~ disp + drat + wt, data = mtcars)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -3.2342 -2.3719 -0.3148  1.6315  6.2820 \n## \n## Coefficients:\n##              Estimate Std. Error t value Pr(>|t|)    \n## (Intercept) 31.043257   7.099792   4.372 0.000154 ***\n## disp        -0.016389   0.009578  -1.711 0.098127 .  \n## drat         0.843965   1.455051   0.580 0.566537    \n## wt          -3.172482   1.217157  -2.606 0.014495 *  \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 2.951 on 28 degrees of freedom\n## Multiple R-squared:  0.7835, Adjusted R-squared:  0.7603 \n## F-statistic: 33.78 on 3 and 28 DF,  p-value: 1.92e-09"},{"path":"statfunctions.html","id":"how-to-add-a-categorical-variable-to-a-model","chapter":"11 Statistical Functions in R: Common Functions and How They Work","heading":"11.7 How to Add a Categorical Variable to a Model","text":"far, ’ve shown add continuous variables. want add categorical variable?column data frame character values (.e., text), model function automatically treat categorical variable. contains numeric values, ’ll need make factor. (Review chapter object-types quick review topic.)","code":"\nmod3 <- lm(mpg~disp+factor(cyl),mtcars)\nsummary(mod3)## \n## Call:\n## lm(formula = mpg ~ disp + factor(cyl), data = mtcars)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -4.8304 -1.5873 -0.5851  0.9753  6.3069 \n## \n## Coefficients:\n##              Estimate Std. Error t value Pr(>|t|)    \n## (Intercept)  29.53477    1.42662  20.703  < 2e-16 ***\n## disp         -0.02731    0.01061  -2.574  0.01564 *  \n## factor(cyl)6 -4.78585    1.64982  -2.901  0.00717 ** \n## factor(cyl)8 -4.79209    2.88682  -1.660  0.10808    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 2.95 on 28 degrees of freedom\n## Multiple R-squared:  0.7837, Adjusted R-squared:  0.7605 \n## F-statistic: 33.81 on 3 and 28 DF,  p-value: 1.906e-09"},{"path":"statfunctions.html","id":"how-to-add-transformed-variables-to-a-model","chapter":"11 Statistical Functions in R: Common Functions and How They Work","heading":"11.8 How to Add Transformed Variables to a Model","text":"Quite often, may need transform variables make work model. Let’s say want build log-log model. different meanings depending field study, econometrics, log-log model transforms inputs outputs using natural logarithm. (often calculate price elasticity.)simply transformations formula argument lm() function. look , simply wrap independent dependent variable log() function:works okay smaller models. want transform many variables, ’s usually easier create new ones data set prior building model:can use new columns model function:","code":"\nmod4 <- lm(log(mpg)~log(disp),mtcars)\nsummary(mod4)## \n## Call:\n## lm(formula = log(mpg) ~ log(disp), data = mtcars)\n## \n## Residuals:\n##      Min       1Q   Median       3Q      Max \n## -0.22758 -0.08874 -0.00791  0.07970  0.32143 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(>|t|)    \n## (Intercept)  5.38097    0.20803   25.87  < 2e-16 ***\n## log(disp)   -0.45857    0.03913  -11.72 1.01e-12 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.1282 on 30 degrees of freedom\n## Multiple R-squared:  0.8207, Adjusted R-squared:  0.8148 \n## F-statistic: 137.3 on 1 and 30 DF,  p-value: 1.006e-12\ncars_log <- mtcars\ncars_log$mpg_log <- log(cars_log$mpg)\ncars_log$disp_log <- log(cars_log$disp)\ncars_log$qsec_log <- log(cars_log$qsec)\n\nsummary(cars_log[c(1,3,7,12,13,14)])##       mpg             disp            qsec          mpg_log     \n##  Min.   :10.40   Min.   : 71.1   Min.   :14.50   Min.   :2.342  \n##  1st Qu.:15.43   1st Qu.:120.8   1st Qu.:16.89   1st Qu.:2.736  \n##  Median :19.20   Median :196.3   Median :17.71   Median :2.955  \n##  Mean   :20.09   Mean   :230.7   Mean   :17.85   Mean   :2.958  \n##  3rd Qu.:22.80   3rd Qu.:326.0   3rd Qu.:18.90   3rd Qu.:3.127  \n##  Max.   :33.90   Max.   :472.0   Max.   :22.90   Max.   :3.523  \n##     disp_log        qsec_log    \n##  Min.   :4.264   Min.   :2.674  \n##  1st Qu.:4.794   1st Qu.:2.827  \n##  Median :5.269   Median :2.874  \n##  Mean   :5.285   Mean   :2.877  \n##  3rd Qu.:5.786   3rd Qu.:2.939  \n##  Max.   :6.157   Max.   :3.131\nmod5 <- lm(mpg_log~disp_log+qsec_log,cars_log)\nsummary(mod5)## \n## Call:\n## lm(formula = mpg_log ~ disp_log + qsec_log, data = cars_log)\n## \n## Residuals:\n##      Min       1Q   Median       3Q      Max \n## -0.22998 -0.08890 -0.00661  0.08202  0.32098 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(>|t|)    \n## (Intercept)  5.26474    0.88872   5.924 1.96e-06 ***\n## disp_log    -0.45587    0.04454 -10.234 3.89e-11 ***\n## qsec_log     0.03544    0.26323   0.135    0.894    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.1303 on 29 degrees of freedom\n## Multiple R-squared:  0.8208, Adjusted R-squared:  0.8085 \n## F-statistic: 66.43 on 2 and 29 DF,  p-value: 1.486e-11"},{"path":"statfunctions.html","id":"how-to-add-variable-interactions-to-a-model","chapter":"11 Statistical Functions in R: Common Functions and How They Work","heading":"11.9 How to Add Variable Interactions to a Model","text":"’s uncommon include interactions model, especially two variables seem correlated. create interactions, simply use * model.actually don’t even need specify variables individually. example, rather mpg~drat+wt+drat*wt, can simply use mpg~drat*wt function treat individually interactions.","code":"\nmod6 <- lm(mpg~drat+wt+drat*wt,mtcars)\nsummary(mod6)## \n## Call:\n## lm(formula = mpg ~ drat + wt + drat * wt, data = mtcars)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -3.8913 -1.8634 -0.3398  1.3247  6.4730 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(>|t|)  \n## (Intercept)    5.550     12.631   0.439   0.6637  \n## drat           8.494      3.321   2.557   0.0162 *\n## wt             3.884      3.798   1.023   0.3153  \n## drat:wt       -2.543      1.093  -2.327   0.0274 *\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 2.839 on 28 degrees of freedom\n## Multiple R-squared:  0.7996, Adjusted R-squared:  0.7782 \n## F-statistic: 37.25 on 3 and 28 DF,  p-value: 6.567e-10\nmod6 <- lm(mpg~drat*wt,mtcars)\nsummary(mod6)## \n## Call:\n## lm(formula = mpg ~ drat * wt, data = mtcars)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -3.8913 -1.8634 -0.3398  1.3247  6.4730 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(>|t|)  \n## (Intercept)    5.550     12.631   0.439   0.6637  \n## drat           8.494      3.321   2.557   0.0162 *\n## wt             3.884      3.798   1.023   0.3153  \n## drat:wt       -2.543      1.093  -2.327   0.0274 *\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 2.839 on 28 degrees of freedom\n## Multiple R-squared:  0.7996, Adjusted R-squared:  0.7782 \n## F-statistic: 37.25 on 3 and 28 DF,  p-value: 6.567e-10"},{"path":"statfunctions.html","id":"how-to-calculate-model-confidence-intervals","chapter":"11 Statistical Functions in R: Common Functions and How They Work","heading":"11.10 How to Calculate Model Confidence Intervals","text":"Even though p-value tells whether variable statistically significant, ’s often best practice include confidence intervals analysis. R makes easy! Simply wrap confint() function around model object.want higher critical value, can change using level argument.See ?confint read function.","code":"\nconfint(mod2)##                   2.5 %       97.5 %\n## (Intercept) 16.49999311 45.586521444\n## disp        -0.03600944  0.003231128\n## drat        -2.13657099  3.824501624\n## wt          -5.66571478 -0.679250218\nconfint(mod2,level=.9)##                     5 %          95 %\n## (Intercept) 18.96558187  4.312093e+01\n## disp        -0.03268312 -9.519212e-05\n## drat        -1.63126649  3.319197e+00\n## wt          -5.24302525 -1.101940e+00"},{"path":"statfunctions.html","id":"how-to-calculate-analysis-of-variance-between-models","chapter":"11 Statistical Functions in R: Common Functions and How They Work","heading":"11.11 How to Calculate Analysis of Variance Between Models","text":"Often ’ll need compare two models see one better explains “variation” data. , simply create two models use anova() function:","code":"\nanova(mod1,mod2)## Analysis of Variance Table\n## \n## Model 1: mpg ~ disp\n## Model 2: mpg ~ disp + drat + wt\n##   Res.Df    RSS Df Sum of Sq     F  Pr(>F)  \n## 1     30 317.16                             \n## 2     28 243.75  2    73.405 4.216 0.02509 *\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"statfunctions.html","id":"other-common-model-types---logistical-regression","chapter":"11 Statistical Functions in R: Common Functions and How They Work","heading":"11.12 Other Common Model Types - Logistical Regression","text":"Chances , want linear regression. statistics book cover programming steps involved whatever models covers. said though, can provide general functions used common statistical models, logistic regression anova models.run logistical model, can use glm() function. script , build use mpg wt predict whether vs 1 0. use family argument make logistical model.glm() function larger range model types lm() function. suggest reviewing ?glm console whenever want build particular type linear model yet discussed . family argument may provide right model type need.Just like linear regression model, can use confint() functions model object generate confidence interval. can see :can also use predict() function model.","code":"\nmod7 <- glm(vs~mpg+wt,data=mtcars,family=binomial(link=\"logit\"))\nsummary(mod7)## \n## Call:\n## glm(formula = vs ~ mpg + wt, family = binomial(link = \"logit\"), \n##     data = mtcars)\n## \n## Deviance Residuals: \n##     Min       1Q   Median       3Q      Max  \n## -2.2020  -0.5835  -0.2311   0.5376   1.7142  \n## \n## Coefficients:\n##             Estimate Std. Error z value Pr(>|z|)  \n## (Intercept) -12.5412     8.4660  -1.481   0.1385  \n## mpg           0.5241     0.2604   2.012   0.0442 *\n## wt            0.5829     1.1845   0.492   0.6227  \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## (Dispersion parameter for binomial family taken to be 1)\n## \n##     Null deviance: 43.860  on 31  degrees of freedom\n## Residual deviance: 25.298  on 29  degrees of freedom\n## AIC: 31.298\n## \n## Number of Fisher Scoring iterations: 6\nconfint(mod7)## Waiting for profiling to be done...##                    2.5 %   97.5 %\n## (Intercept) -31.90842474 2.921046\n## mpg           0.09326514 1.165436\n## wt           -1.91815266 2.936813"},{"path":"statfunctions.html","id":"other-common-model-types---anova-models","chapter":"11 Statistical Functions in R: Common Functions and How They Work","heading":"11.13 Other Common Model Types - Anova Models","text":"build ANOVA model, ’ll use aov() function. function follows similar process lm() function actually generates regression model using formula enter.’ll learn stats class, many ANOVA models focus categorical variables determine whether ’s difference mean outcome. common model scenario fixed-effects model.Let’s convert cars data factors, can build fixed-effects model.Remember, model functions R treat numeric inputs continuous variable. Since want treat variables (range include labels 0, 1, 3, 4), need ensure function run treats categorical. ’s factor .Now can build fixed-effects model using aov() function:summary() function also gives ANOVA table model allows determine group bigger impact.Sometimes still want model shows actual impact variable expected output. can first running lm() function formula.can reference model object aov() function earlier get ANOVA table.","code":"\nmtcars_factor <- mtcars\nmtcars_factor$gear <- factor(mtcars_factor$gear)\nmtcars_factor$vs <- factor(mtcars_factor$vs)\nmod8 <- aov(mpg~vs+gear,data=mtcars_factor)\nsummary(mod8)##             Df Sum Sq Mean Sq F value   Pr(>F)    \n## vs           1  496.5   496.5  29.407 8.74e-06 ***\n## gear         2  156.8    78.4   4.642   0.0182 *  \n## Residuals   28  472.8    16.9                     \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nmod9 <- lm(mpg~vs+gear,data=mtcars_factor)\nsummary(mod9)## \n## Call:\n## lm(formula = mpg ~ vs + gear, data = mtcars_factor)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -7.7185 -2.7227  0.2755  1.9300  8.3815 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(>|t|)    \n## (Intercept)   14.924      1.124  13.273 1.33e-13 ***\n## vs1            5.911      1.863   3.173  0.00364 ** \n## gear4          4.683      1.981   2.364  0.02525 *  \n## gear5          5.273      2.122   2.485  0.01919 *  \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 4.109 on 28 degrees of freedom\n## Multiple R-squared:  0.5802, Adjusted R-squared:  0.5352 \n## F-statistic:  12.9 on 3 and 28 DF,  p-value: 1.787e-05\nsummary(mod8)##             Df Sum Sq Mean Sq F value   Pr(>F)    \n## vs           1  496.5   496.5  29.407 8.74e-06 ***\n## gear         2  156.8    78.4   4.642   0.0182 *  \n## Residuals   28  472.8    16.9                     \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nsummary(aov(mod9))##             Df Sum Sq Mean Sq F value   Pr(>F)    \n## vs           1  496.5   496.5  29.407 8.74e-06 ***\n## gear         2  156.8    78.4   4.642   0.0182 *  \n## Residuals   28  472.8    16.9                     \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"statfunctions.html","id":"things-to-remember-9","chapter":"11 Statistical Functions in R: Common Functions and How They Work","heading":"11.14 Things to Remember","text":"Building evaluating models follows steps, regardless function useThe model function (lm(), glm(), aov(), etc.) produces listYou can assign list name reference againYou can use model object make predictions new existing data predict() functionYou can use model object generate confidence intervals confint()functionYou can get model performance metrics summary() functionYou evaluate two models one another anova() functionYou can export model (without exporting data) using write_rds() function","code":""},{"path":"statfunctions.html","id":"exercises-6","chapter":"11 Statistical Functions in R: Common Functions and How They Work","heading":"11.15 Exercises","text":"Using data set iris (data(iris)), build linear regression model uses Sepal.Length Sepal.Width predict Petal.Length. Assign model name “PracticeModel”.Determine whether two parameters statistically signficant. (.e., p-values less 0.05.)Predict value Petal.Length Sepal.Length 5 Sepal.Width 3.25. (Hint: create single row data frame two values assigned respective column names.)Determine model’s confidence intervals.","code":""},{"path":"answers.html","id":"answers","chapter":"12 Answer Key","heading":"12 Answer Key","text":"","code":""},{"path":"answers.html","id":"chapter-4---object-types-in-r-programming","chapter":"12 Answer Key","heading":"12.1 Chapter 4 - Object Types in R Programming","text":"object array.object vector.output vector.output data frame.output factor, run following code:","code":"\ndata(mtcars)\nfactor(mtcars$gear)"},{"path":"answers.html","id":"chapter-5---how-to-filter-and-transform-data-in-base-r","chapter":"12 Answer Key","heading":"12.2 Chapter 5 - How to Filter and Transform Data in Base R","text":"Filter following vector values greater 2Filter following vector values 20 30, first three entries meet criteria. (Hint: add [n:n] range values determine values meet criteria)Multiply following matrices together.Subtract 41 every entry second column following matrix. Replace column new values.Select second row matrix following array. Subtract 5 rows.Filter following data frame Bond films starring Roger Moore.Filter following data frame Bond films starring Sean Connery made 1966.","code":"\n  q1 <- seq(1,20,2)\n  q1[q1 > 2]\n  q2 <- round(rnorm(20,32,7),0)\n  q2 >= 20 & q2 <= 30\n  q2[q2 >= 20 & q2 <= 30][1:3]\n  q3_1 <- matrix(round(seq(1,40,3.27),0),3)\n  q3_2 <- matrix(seq(1,8,1),4)\n  q3_1 %*% q3_2\n  q4 <- matrix(seq(1,120,4),10,3)\n  q4\n  q4[,2] <- q4[,2] - 41\n  q4\n  q5 <- array(data=c(matrix(seq(1,15,1),5,3),\n                  matrix(seq(4,60,4),5,3),\n                  matrix(seq(2,30,2),5,3)),\n                dim=c(5,3,3))\n  q5\n  q5[2,,]-5\n  bond[bond[\"actor\"]==\"Roger Moore\",]\n  bond[bond[\"actor\"]==\"Sean Connery\" & bond[\"year\"] > 1966,]"},{"path":"answers.html","id":"chapter-6---how-to-filter-and-transform-data-with-the-dplyr-package","chapter":"12 Answer Key","heading":"12.3 Chapter 6 - How to Filter and Transform Data with the Dplyr Package","text":"use %>% notation, filter() function, operates |, ==, > accomplish .addition script , use select() function reduce columns.Instead using select() previous script, use transmute(). function allows transform column select mentioned.use filter(), group_by(), summarize() functions pull summary data.","code":"\ndata(mtcars)\nlibrary(dplyr)\nmtcars %>% filter(gear==4 | hp > 115)\ndata(mtcars)\nlibrary(dplyr)\nmtcars %>% \n  filter(gear==4 | hp > 115) %>%\n  select(mpg,cyl,gear,hp)\ndata(mtcars)\nlibrary(dplyr)\nmtcars %>% \n  filter(gear==4 | hp > 115) %>%\n  transmute(mpg_log=log(mpg),cyl,gear,hp)\ndata(mtcars)\nlibrary(dplyr)\nmtcars %>% \n  filter(wt > 2) %>%\n  group_by(gear) %>%\n  summarize(avg_mpg=mean(mpg))"},{"path":"answers.html","id":"chapter-7---understanding-and-using-r-packages","chapter":"12 Answer Key","heading":"12.4 Chapter 7 - Understanding and Using R Packages","text":"install tidyverse set packages, run script install.packages(\"tidyverse\").load dplyr package, run script library(dplyr).","code":""},{"path":"answers.html","id":"chapter-8---how-to-write-functions","chapter":"12 Answer Key","heading":"12.5 Chapter 8 - How to Write Functions","text":"Modify simply standard deviation function wrote change calculate mean. without using built-mean function.Alter summary.group function include median, minimum, maximum values.Write function Fibonacci Sequence, ends number choose. ’ll need use control flow accomplish default value end sequence. (Hint: won’t use (var seq) expr control flow. Execute ?Control use different version.)","code":"\n  avg.simple <- function(data,field) {\n    field <- data[,paste(field)]\n    sum(field)/length(field)\n  }\n  summary.group <- function(data,group,field) {\n    groups <- levels(factor(data[,paste(group)]))\n    output <- data.frame(group=character(),\n                         mean=numeric(),\n                         sd=numeric(),\n                         median=numeric(),\n                         minimum=numeric(),\n                         maximum=numeric())\n    for(i in 1:length(groups)) {\n      subdata <- data[data[,paste(group)]==groups[i],\n                      paste(field)]\n      output[i,1:6] <- data.frame(groups[i],\n                                  mean(subdata),\n                                  sd(subdata),\n                                  median(subdata),\n                                  min(subdata),\n                                  max(subdata))\n      }\n    output\n  }\n  fib <- function(end=55){\n    x <- c(0,1)\n    n <- length(x)\n    while(x[n]<end){\n      x[n+1] <- x[n]+x[n-1]\n      n <- length(x)\n    }\n    x\n  }"},{"path":"answers.html","id":"chapter-10---how-to-plot-data-in-r","chapter":"12 Answer Key","heading":"12.6 Chapter 10 - How to Plot Data in R","text":"Use ggplot(), aes(), geom_point() functions construct plot.Simply add factor(cyl) color argument aes() function.Use x, y, color arguments labs() function use intuitive naming convention.Use title argument labs() function.Use theme_pew() theme ggthemes package.","code":"\nlibrary(ggplot2)\ndata(mtcars)\nggplot(data=mtcars,\n        mapping=aes(x=hp,y=mpg)) +\n  geom_point(size=3)\nlibrary(ggplot2)\ndata(mtcars)\nggplot(data=mtcars,\n        mapping=aes(x=hp,y=mpg,color=factor(cyl))) +\n  geom_point(size=3)\nlibrary(ggplot2)\ndata(mtcars)\nggplot(data=mtcars,\n        mapping=aes(x=hp,y=mpg,color=factor(cyl))) +\n  geom_point(size=3) +\n  labs(x=\"Horsepower\",\n       y=\"Miles Per Gallon\",\n       color=\"Cylinders\")\nlibrary(ggplot2)\ndata(mtcars)\nggplot(data=mtcars,\n        mapping=aes(x=hp,y=mpg,color=factor(cyl))) +\n  geom_point(size=3) +\n  labs(x=\"Horsepower\",\n       y=\"Miles Per Gallon\",\n       color=\"Cylinders\",\n       title=\"Car Performance\")\nlibrary(ggplot2)\nlibrary(ggthemes)\ndata(mtcars)\nggplot(data=mtcars,\n        mapping=aes(x=hp,y=mpg,color=factor(cyl))) +\n  geom_point(size=3) +\n  labs(x=\"Horsepower\",\n       y=\"Miles Per Gallon\",\n       color=\"Cylinders\",\n       title=\"Car Performance\") +\n  theme_few()"},{"path":"answers.html","id":"chapter-11---statistical-functions-in-r","chapter":"12 Answer Key","heading":"12.7 Chapter 11 - Statistical Functions in R","text":"loading data data(), use lm() function build model.Use summary() function model determine model performance, p-values.Use predict() function make model predictions new data set.Use confint() function determine confident intervals model.","code":"\ndata(iris)\nPracticeModel <- lm(Petal.Length~Sepal.Length+Sepal.Width,data=iris)\nsummary(PracticeModel)\nNewData <- data.frame(Sepal.Length=5,Sepal.Width=3.25)\npredict(PracticeModel,NewData)\nconfint(PracticeModel)"},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
